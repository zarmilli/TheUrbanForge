{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/functions-js/src/helper.ts"],"sourcesContent":["import { Fetch } from './types'\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = (...args) =>\n      import('@supabase/node-fetch' as any).then(({ default: fetch }) => fetch(...args))\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n"],"names":[],"mappings":";;;AAEO,MAAM,eAAe,CAAC;IAC3B,IAAI;IACJ,IAAI,aAAa;QACf,SAAS;IACX,OAAO,IAAI,OAAO,UAAU,aAAa;QACvC,SAAS,CAAC,GAAG,OACX,8IAAsC,IAAI,CAAC,CAAC,EAAE,SAAS,MAAK,EAAE,GAAK,UAAS;IAChF,OAAO;QACL,SAAS;IACX;IACA,OAAO,CAAC,GAAG,OAAS,UAAU;AAChC"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/functions-js/src/types.ts"],"sourcesContent":["export type Fetch = typeof fetch\n\n/**\n * Response format\n */\nexport interface FunctionsResponseSuccess<T> {\n  data: T\n  error: null\n  response?: Response\n}\nexport interface FunctionsResponseFailure {\n  data: null\n  error: any\n  response?: Response\n}\nexport type FunctionsResponse<T> = FunctionsResponseSuccess<T> | FunctionsResponseFailure\n\nexport class FunctionsError extends Error {\n  context: any\n  constructor(message: string, name = 'FunctionsError', context?: any) {\n    super(message)\n    this.name = name\n    this.context = context\n  }\n}\n\nexport class FunctionsFetchError extends FunctionsError {\n  constructor(context: any) {\n    super('Failed to send a request to the Edge Function', 'FunctionsFetchError', context)\n  }\n}\n\nexport class FunctionsRelayError extends FunctionsError {\n  constructor(context: any) {\n    super('Relay Error invoking the Edge Function', 'FunctionsRelayError', context)\n  }\n}\n\nexport class FunctionsHttpError extends FunctionsError {\n  constructor(context: any) {\n    super('Edge Function returned a non-2xx status code', 'FunctionsHttpError', context)\n  }\n}\n// Define the enum for the 'region' property\nexport enum FunctionRegion {\n  Any = 'any',\n  ApNortheast1 = 'ap-northeast-1',\n  ApNortheast2 = 'ap-northeast-2',\n  ApSouth1 = 'ap-south-1',\n  ApSoutheast1 = 'ap-southeast-1',\n  ApSoutheast2 = 'ap-southeast-2',\n  CaCentral1 = 'ca-central-1',\n  EuCentral1 = 'eu-central-1',\n  EuWest1 = 'eu-west-1',\n  EuWest2 = 'eu-west-2',\n  EuWest3 = 'eu-west-3',\n  SaEast1 = 'sa-east-1',\n  UsEast1 = 'us-east-1',\n  UsWest1 = 'us-west-1',\n  UsWest2 = 'us-west-2',\n}\n\nexport type FunctionInvokeOptions = {\n  /**\n   * Object representing the headers to send with the request.\n   */\n  headers?: { [key: string]: string }\n  /**\n   * The HTTP verb of the request\n   */\n  method?: 'POST' | 'GET' | 'PUT' | 'PATCH' | 'DELETE'\n  /**\n   * The Region to invoke the function in.\n   */\n  region?: FunctionRegion\n  /**\n   * The body of the request.\n   */\n  body?:\n    | File\n    | Blob\n    | ArrayBuffer\n    | FormData\n    | ReadableStream<Uint8Array>\n    | Record<string, any>\n    | string\n  /**\n   * The AbortSignal to use for the request.\n   * */\n  signal?: AbortSignal\n}\n"],"names":[],"mappings":";;;;;;;AAiBM,MAAO,uBAAuB;IAElC,YAAY,OAAe,EAAE,OAAO,gBAAgB,EAAE,OAAa,CAAA;QACjE,KAAK,CAAC;QACN,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,OAAO,GAAG;IACjB;;AAGI,MAAO,4BAA4B;IACvC,YAAY,OAAY,CAAA;QACtB,KAAK,CAAC,iDAAiD,uBAAuB;IAChF;;AAGI,MAAO,4BAA4B;IACvC,YAAY,OAAY,CAAA;QACtB,KAAK,CAAC,0CAA0C,uBAAuB;IACzE;;AAGI,MAAO,2BAA2B;IACtC,YAAY,OAAY,CAAA;QACtB,KAAK,CAAC,gDAAgD,sBAAsB;IAC9E;;AAGF,IAAY;AAAZ,CAAA,SAAY,cAAc;IACxB,cAAA,CAAA,MAAA,GAAA;IACA,cAAA,CAAA,eAAA,GAAA;IACA,cAAA,CAAA,eAAA,GAAA;IACA,cAAA,CAAA,WAAA,GAAA;IACA,cAAA,CAAA,eAAA,GAAA;IACA,cAAA,CAAA,eAAA,GAAA;IACA,cAAA,CAAA,aAAA,GAAA;IACA,cAAA,CAAA,aAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;AACF,CAAC,EAhBW,kBAAc,CAAd,iBAAc,CAAA,CAAA"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/functions-js/src/FunctionsClient.ts"],"sourcesContent":["import { resolveFetch } from './helper'\nimport {\n  Fetch,\n  FunctionInvokeOptions,\n  FunctionRegion,\n  FunctionsFetchError,\n  FunctionsHttpError,\n  FunctionsRelayError,\n  FunctionsResponse,\n} from './types'\n\nexport class FunctionsClient {\n  protected url: string\n  protected headers: Record<string, string>\n  protected region: FunctionRegion\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      customFetch,\n      region = FunctionRegion.Any,\n    }: {\n      headers?: Record<string, string>\n      customFetch?: Fetch\n      region?: FunctionRegion\n    } = {}\n  ) {\n    this.url = url\n    this.headers = headers\n    this.region = region\n    this.fetch = resolveFetch(customFetch)\n  }\n\n  /**\n   * Updates the authorization header\n   * @param token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token: string) {\n    this.headers.Authorization = `Bearer ${token}`\n  }\n\n  /**\n   * Invokes a function\n   * @param functionName - The name of the Function to invoke.\n   * @param options - Options for invoking the Function.\n   */\n  async invoke<T = any>(\n    functionName: string,\n    options: FunctionInvokeOptions = {}\n  ): Promise<FunctionsResponse<T>> {\n    try {\n      const { headers, method, body: functionArgs, signal } = options\n      let _headers: Record<string, string> = {}\n      let { region } = options\n      if (!region) {\n        region = this.region\n      }\n      // Add region as query parameter using URL API\n      const url = new URL(`${this.url}/${functionName}`)\n      if (region && region !== 'any') {\n        _headers['x-region'] = region\n        url.searchParams.set('forceFunctionRegion', region)\n      }\n      let body: any\n      if (\n        functionArgs &&\n        ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)\n      ) {\n        if (\n          (typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\n          functionArgs instanceof ArrayBuffer\n        ) {\n          // will work for File as File inherits Blob\n          // also works for ArrayBuffer as it is the same underlying structure as a Blob\n          _headers['Content-Type'] = 'application/octet-stream'\n          body = functionArgs\n        } else if (typeof functionArgs === 'string') {\n          // plain string\n          _headers['Content-Type'] = 'text/plain'\n          body = functionArgs\n        } else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n          // don't set content-type headers\n          // Request will automatically add the right boundary value\n          body = functionArgs\n        } else {\n          // default, assume this is JSON\n          _headers['Content-Type'] = 'application/json'\n          body = JSON.stringify(functionArgs)\n        }\n      }\n\n      const response = await this.fetch(url.toString(), {\n        method: method || 'POST',\n        // headers priority is (high to low):\n        // 1. invoke-level headers\n        // 2. client-level headers\n        // 3. default Content-Type header\n        headers: { ..._headers, ...this.headers, ...headers },\n        body,\n        signal,\n      }).catch((fetchError) => {\n        if (fetchError.name === 'AbortError') {\n          throw fetchError\n        }\n        throw new FunctionsFetchError(fetchError)\n      })\n\n      const isRelayError = response.headers.get('x-relay-error')\n      if (isRelayError && isRelayError === 'true') {\n        throw new FunctionsRelayError(response)\n      }\n\n      if (!response.ok) {\n        throw new FunctionsHttpError(response)\n      }\n\n      let responseType = (response.headers.get('Content-Type') ?? 'text/plain').split(';')[0].trim()\n      let data: any\n      if (responseType === 'application/json') {\n        data = await response.json()\n      } else if (responseType === 'application/octet-stream') {\n        data = await response.blob()\n      } else if (responseType === 'text/event-stream') {\n        data = response\n      } else if (responseType === 'multipart/form-data') {\n        data = await response.formData()\n      } else {\n        // default to text\n        data = await response.text()\n      }\n\n      return { data, error: null, response }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        return { data: null, error: new FunctionsFetchError(error) }\n      }\n      return {\n        data: null,\n        error,\n        response:\n          error instanceof FunctionsHttpError || error instanceof FunctionsRelayError\n            ? error.context\n            : undefined,\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/node-fetch/browser.js"],"sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function() {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') { return self; }\n    if (typeof window !== 'undefined') { return window; }\n    if (typeof global !== 'undefined') { return global; }\n    throw new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nexport const fetch = globalObject.fetch;\n\nexport default globalObject.fetch.bind(globalObject);\n\nexport const Headers = globalObject.Headers;\nexport const Request = globalObject.Request;\nexport const Response = globalObject.Response;\n"],"names":[],"mappings":";;;;;;;AAAA;AAEA,+CAA+C;AAC/C,IAAI,YAAY;IACZ,sDAAsD;IACtD,8BAA8B;IAC9B,sDAAsD;IACtD,IAAI,OAAO,SAAS,aAAa;QAAE,OAAO;IAAM;IAChD,IAAI,OAAO,WAAW,aAAa;QAAE,OAAO;IAAQ;IACpD,IAAI,OAAO,WAAW,aAAa;QAAE,OAAO;IAAQ;IACpD,MAAM,IAAI,MAAM;AACpB;AAEA,IAAI,eAAe;AAEZ,MAAM,QAAQ,aAAa,KAAK;uCAExB,aAAa,KAAK,CAAC,IAAI,CAAC;AAEhC,MAAM,UAAU,aAAa,OAAO;AACpC,MAAM,UAAU,aAAa,OAAO;AACpC,MAAM,WAAW,aAAa,QAAQ"}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/postgrest-js/src/PostgrestError.ts"],"sourcesContent":["/**\n * Error format\n *\n * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}\n */\nexport default class PostgrestError extends Error {\n  details: string\n  hint: string\n  code: string\n\n  constructor(context: { message: string; details: string; hint: string; code: string }) {\n    super(context.message)\n    this.name = 'PostgrestError'\n    this.details = context.details\n    this.hint = context.hint\n    this.code = context.code\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;;;IAKA,MAAqB,uBAAuB;IAK1C,YAAY,OAAyE,CAAA;QACnF,KAAK,CAAC,QAAQ,OAAO;QACrB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,OAAO,GAAG,QAAQ,OAAO;QAC9B,IAAI,CAAC,IAAI,GAAG,QAAQ,IAAI;QACxB,IAAI,CAAC,IAAI,GAAG,QAAQ,IAAI;IAC1B;;AAXF,QAAA,OAAA,GAAA"}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/postgrest-js/src/PostgrestBuilder.ts"],"sourcesContent":["// @ts-ignore\nimport nodeFetch from '@supabase/node-fetch'\n\nimport type {\n  Fetch,\n  PostgrestSingleResponse,\n  PostgrestResponseSuccess,\n  CheckMatchingArrayTypes,\n  MergePartialResult,\n  IsValidResultOverride,\n  ClientServerOptions,\n} from './types'\nimport PostgrestError from './PostgrestError'\nimport { ContainsNull } from './select-query-parser/types'\n\nexport default abstract class PostgrestBuilder<\n  ClientOptions extends ClientServerOptions,\n  Result,\n  ThrowOnError extends boolean = false,\n> implements\n    PromiseLike<\n      ThrowOnError extends true ? PostgrestResponseSuccess<Result> : PostgrestSingleResponse<Result>\n    >\n{\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url: URL\n  protected headers: Headers\n  protected schema?: string\n  protected body?: unknown\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected isMaybeSingle: boolean\n\n  constructor(builder: {\n    method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n    url: URL\n    headers: HeadersInit\n    schema?: string\n    body?: unknown\n    shouldThrowOnError?: boolean\n    signal?: AbortSignal\n    fetch?: Fetch\n    isMaybeSingle?: boolean\n  }) {\n    this.method = builder.method\n    this.url = builder.url\n    this.headers = new Headers(builder.headers)\n    this.schema = builder.schema\n    this.body = builder.body\n    this.shouldThrowOnError = builder.shouldThrowOnError ?? false\n    this.signal = builder.signal\n    this.isMaybeSingle = builder.isMaybeSingle ?? false\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = nodeFetch\n    } else {\n      this.fetch = fetch\n    }\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): this & PostgrestBuilder<ClientOptions, Result, true> {\n    this.shouldThrowOnError = true\n    return this as this & PostgrestBuilder<ClientOptions, Result, true>\n  }\n\n  /**\n   * Set an HTTP header for the request.\n   */\n  setHeader(name: string, value: string): this {\n    this.headers = new Headers(this.headers)\n    this.headers.set(name, value)\n    return this\n  }\n\n  then<\n    TResult1 = ThrowOnError extends true\n      ? PostgrestResponseSuccess<Result>\n      : PostgrestSingleResponse<Result>,\n    TResult2 = never,\n  >(\n    onfulfilled?:\n      | ((\n          value: ThrowOnError extends true\n            ? PostgrestResponseSuccess<Result>\n            : PostgrestSingleResponse<Result>\n        ) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers.set('Accept-Profile', this.schema)\n    } else {\n      this.headers.set('Content-Profile', this.schema)\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers.set('Content-Type', 'application/json')\n    }\n\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count: number | null = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text()\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers.get('Accept') === 'text/csv') {\n            data = body\n          } else if (\n            this.headers.get('Accept') &&\n            this.headers.get('Accept')?.includes('application/vnd.pgrst.plan+text')\n          ) {\n            data = body\n          } else {\n            data = JSON.parse(body)\n          }\n        }\n\n        const countHeader = this.headers.get('Prefer')?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n          if (data.length > 1) {\n            error = {\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n              code: 'PGRST116',\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n              hint: null,\n              message: 'JSON object requested, multiple (or no) rows returned',\n            }\n            data = null\n            count = null\n            status = 406\n            statusText = 'Not Acceptable'\n          } else if (data.length === 1) {\n            data = data[0]\n          } else {\n            data = null\n          }\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (Array.isArray(error) && res.status === 404) {\n            data = []\n            error = null\n            status = 200\n            statusText = 'OK'\n          }\n        } catch {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204\n            statusText = 'No Content'\n          } else {\n            error = {\n              message: body,\n            }\n          }\n        }\n\n        if (error && this.isMaybeSingle && error?.details?.includes('0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw new PostgrestError(error)\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `${fetchError?.name ?? 'FetchError'}: ${fetchError?.message}`,\n          details: `${fetchError?.stack ?? ''}`,\n          hint: '',\n          code: `${fetchError?.code ?? ''}`,\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: '',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n   */\n  returns<NewResult>(): PostgrestBuilder<\n    ClientOptions,\n    CheckMatchingArrayTypes<Result, NewResult>,\n    ThrowOnError\n  > {\n    /* istanbul ignore next */\n    return this as unknown as PostgrestBuilder<\n      ClientOptions,\n      CheckMatchingArrayTypes<Result, NewResult>,\n      ThrowOnError\n    >\n  }\n\n  /**\n   * Override the type of the returned `data` field in the response.\n   *\n   * @typeParam NewResult - The new type to cast the response data to\n   * @typeParam Options - Optional type configuration (defaults to { merge: true })\n   * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\n   * @example\n   * ```typescript\n   * // Merge with existing types (default behavior)\n   * const query = supabase\n   *   .from('users')\n   *   .select()\n   *   .overrideTypes<{ custom_field: string }>()\n   *\n   * // Replace existing types completely\n   * const replaceQuery = supabase\n   *   .from('users')\n   *   .select()\n   *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\n   * ```\n   * @returns A PostgrestBuilder instance with the new type\n   */\n  overrideTypes<\n    NewResult,\n    Options extends { merge?: boolean } = { merge: true },\n  >(): PostgrestBuilder<\n    ClientOptions,\n    IsValidResultOverride<Result, NewResult, false, false> extends true\n      ? // Preserve the optionality of the result if the overriden type is an object (case of chaining with `maybeSingle`)\n        ContainsNull<Result> extends true\n        ? MergePartialResult<NewResult, NonNullable<Result>, Options> | null\n        : MergePartialResult<NewResult, Result, Options>\n      : CheckMatchingArrayTypes<Result, NewResult>,\n    ThrowOnError\n  > {\n    return this as unknown as PostgrestBuilder<\n      ClientOptions,\n      IsValidResultOverride<Result, NewResult, false, false> extends true\n        ? // Preserve the optionality of the result if the overriden type is an object (case of chaining with `maybeSingle`)\n          ContainsNull<Result> extends true\n          ? MergePartialResult<NewResult, NonNullable<Result>, Options> | null\n          : MergePartialResult<NewResult, Result, Options>\n        : CheckMatchingArrayTypes<Result, NewResult>,\n      ThrowOnError\n    >\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/postgrest-js/src/PostgrestTransformBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\nimport { InvalidMethodError } from './PostgrestFilterBuilder'\nimport { GetResult } from './select-query-parser/result'\nimport {\n  GenericSchema,\n  CheckMatchingArrayTypes,\n  ClientServerOptions,\n  MaxAffectedEnabled,\n} from './types'\n\nexport default class PostgrestTransformBuilder<\n  ClientOptions extends ClientServerOptions,\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result,\n  RelationName = unknown,\n  Relationships = unknown,\n  Method = unknown,\n> extends PostgrestBuilder<ClientOptions, Result> {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select<\n    Query extends string = '*',\n    NewResultOne = GetResult<Schema, Row, RelationName, Relationships, Query, ClientOptions>,\n  >(\n    columns?: Query\n  ): PostgrestTransformBuilder<\n    ClientOptions,\n    Schema,\n    Row,\n    NewResultOne[],\n    RelationName,\n    Relationships,\n    Method\n  > {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    this.headers.append('Prefer', 'return=representation')\n    return this as unknown as PostgrestTransformBuilder<\n      ClientOptions,\n      Schema,\n      Row,\n      NewResultOne[],\n      RelationName,\n      Relationships,\n      Method\n    >\n  }\n\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: undefined }\n  ): this\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: string }\n  ): this\n  /**\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\n   */\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\n  ): this\n  /**\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\n   */\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string }\n  ): this\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order referenced tables, but it only affects the ordering of the\n   * parent table if you use `!inner` in the query.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.referencedTable - Set this to order a referenced table by\n   * its columns\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n  order(\n    column: string,\n    {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n      referencedTable = foreignTable,\n    }: {\n      ascending?: boolean\n      nullsFirst?: boolean\n      foreignTable?: string\n      referencedTable?: string\n    } = {}\n  ): this {\n    const key = referencedTable ? `${referencedTable}.order` : 'order'\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.referencedTable - Set this to limit rows of referenced\n   * tables instead of the parent table\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n  limit(\n    count: number,\n    {\n      foreignTable,\n      referencedTable = foreignTable,\n    }: { foreignTable?: string; referencedTable?: string } = {}\n  ): this {\n    const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n   * Only records within this range are returned.\n   * This respects the query order and if there is no order clause the range could behave unexpectedly.\n   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n   * and fourth rows of the query.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.referencedTable - Set this to limit rows of referenced\n   * tables instead of the parent table\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n  range(\n    from: number,\n    to: number,\n    {\n      foreignTable,\n      referencedTable = foreignTable,\n    }: { foreignTable?: string; referencedTable?: string } = {}\n  ): this {\n    const keyOffset =\n      typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`\n    const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n  single<ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never>(): PostgrestBuilder<\n    ClientOptions,\n    ResultOne\n  > {\n    this.headers.set('Accept', 'application/vnd.pgrst.object+json')\n    return this as unknown as PostgrestBuilder<ClientOptions, ResultOne>\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n  maybeSingle<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never,\n  >(): PostgrestBuilder<ClientOptions, ResultOne | null> {\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n    if (this.method === 'GET') {\n      this.headers.set('Accept', 'application/json')\n    } else {\n      this.headers.set('Accept', 'application/vnd.pgrst.object+json')\n    }\n    this.isMaybeSingle = true\n    return this as unknown as PostgrestBuilder<ClientOptions, ResultOne | null>\n  }\n\n  /**\n   * Return `data` as a string in CSV format.\n   */\n  csv(): PostgrestBuilder<ClientOptions, string> {\n    this.headers.set('Accept', 'text/csv')\n    return this as unknown as PostgrestBuilder<ClientOptions, string>\n  }\n\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n  geojson(): PostgrestBuilder<ClientOptions, Record<string, unknown>> {\n    this.headers.set('Accept', 'application/geo+json')\n    return this as unknown as PostgrestBuilder<ClientOptions, Record<string, unknown>>\n  }\n\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * You need to enable the\n   * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n   * setting before using this method.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text',\n  }: {\n    analyze?: boolean\n    verbose?: boolean\n    settings?: boolean\n    buffers?: boolean\n    wal?: boolean\n    format?: 'json' | 'text'\n  } = {}) {\n    const options = [\n      analyze ? 'analyze' : null,\n      verbose ? 'verbose' : null,\n      settings ? 'settings' : null,\n      buffers ? 'buffers' : null,\n      wal ? 'wal' : null,\n    ]\n      .filter(Boolean)\n      .join('|')\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = this.headers.get('Accept') ?? 'application/json'\n    this.headers.set(\n      'Accept',\n      `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\n    )\n    if (format === 'json') {\n      return this as unknown as PostgrestBuilder<ClientOptions, Record<string, unknown>[]>\n    } else {\n      return this as unknown as PostgrestBuilder<ClientOptions, string>\n    }\n  }\n\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n  rollback(): this {\n    this.headers.append('Prefer', 'tx=rollback')\n    return this\n  }\n\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n   */\n  returns<NewResult>(): PostgrestTransformBuilder<\n    ClientOptions,\n    Schema,\n    Row,\n    CheckMatchingArrayTypes<Result, NewResult>,\n    RelationName,\n    Relationships,\n    Method\n  > {\n    return this as unknown as PostgrestTransformBuilder<\n      ClientOptions,\n      Schema,\n      Row,\n      CheckMatchingArrayTypes<Result, NewResult>,\n      RelationName,\n      Relationships,\n      Method\n    >\n  }\n\n  /**\n   * Set the maximum number of rows that can be affected by the query.\n   * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.\n   *\n   * @param value - The maximum number of rows that can be affected\n   */\n  maxAffected(value: number): MaxAffectedEnabled<ClientOptions['PostgrestVersion']> extends true\n    ? // TODO: update the RPC case to only work on RPC that returns SETOF rows\n      Method extends 'PATCH' | 'DELETE' | 'RPC'\n      ? this\n      : InvalidMethodError<'maxAffected method only available on update or delete'>\n    : InvalidMethodError<'maxAffected method only available on postgrest 13+'> {\n    this.headers.append('Prefer', 'handling=strict')\n    this.headers.append('Prefer', `max-affected=${value}`)\n    return this as unknown as MaxAffectedEnabled<ClientOptions['PostgrestVersion']> extends true\n      ? Method extends 'PATCH' | 'DELETE' | 'RPC'\n        ? this\n        : InvalidMethodError<'maxAffected method only available on update or delete'>\n      : InvalidMethodError<'maxAffected method only available on postgrest 13+'>\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA,MAAA,qBAAA;AAUA,MAAqB,kCAQX,mBAAA,OAAuC;IAC/C;;;;;;;;QASA,OAIE,OAAe,EAAA;QAUf,wCAAwC;QACxC,IAAI,SAAS;QACb,MAAM,iBAAiB,CAAC,YAAO,QAAP,YAAO,KAAA,IAAP,UAAW,GAAG,EACnC,KAAK,CAAC,IACN,GAAG,CAAC,CAAC;YACJ,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ;gBAC3B,OAAO;YACT;YACA,IAAI,MAAM,KAAK;gBACb,SAAS,CAAC;YACZ;YACA,OAAO;QACT,GACC,IAAI,CAAC;QACR,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU;QACpC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU;QAC9B,OAAO,IAQN;IACH;IAwBA;;;;;;;;;;;;;;;;;QAkBA,MACE,MAAc,EACd,EACE,YAAY,IAAI,EAChB,UAAU,EACV,YAAY,EACZ,kBAAkB,YAAY,EAAA,GAM5B,CAAA,CAAE,EAAA;QAEN,MAAM,MAAM,kBAAkB,CAAA,EAAG,gBAAe,MAAA,CAAQ,GAAG;QAC3D,MAAM,gBAAgB,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC;QAEhD,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CACvB,KACA,CAAA,EAAG,gBAAgB,CAAA,EAAG,cAAa,CAAA,CAAG,GAAG,GAAE,EAAG,OAAM,CAAA,EAAI,YAAY,QAAQ,OAAM,EAChF,eAAe,YAAY,KAAK,aAAa,gBAAgB,aAC/D,CAAE;QAEJ,OAAO,IAAI;IACb;IAEA;;;;;;;;;QAUA,MACE,KAAa,EACb,EACE,YAAY,EACZ,kBAAkB,YAAY,EAAA,GACyB,CAAA,CAAE,EAAA;QAE3D,MAAM,MAAM,OAAO,oBAAoB,cAAc,UAAU,CAAA,EAAG,gBAAe,MAAA,CAAQ;QACzF,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAA,EAAG,MAAK,CAAE;QACzC,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;QAeA,MACE,IAAY,EACZ,EAAU,EACV,EACE,YAAY,EACZ,kBAAkB,YAAY,EAAA,GACyB,CAAA,CAAE,EAAA;QAE3D,MAAM,YACJ,OAAO,oBAAoB,cAAc,WAAW,CAAA,EAAG,gBAAe,OAAA,CAAS;QACjF,MAAM,WAAW,OAAO,oBAAoB,cAAc,UAAU,CAAA,EAAG,gBAAe,MAAA,CAAQ;QAC9F,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAA,EAAG,KAAI,CAAE;QAC9C,+BAA+B;QAC/B,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAA,EAAG,KAAK,OAAO,EAAC,CAAE;QACtD,OAAO,IAAI;IACb;IAEA;;;;QAKA,YAAY,MAAmB,EAAA;QAC7B,IAAI,CAAC,MAAM,GAAG;QACd,OAAO,IAAI;IACb;IAEA;;;;;QAMA,SAAM;QAIJ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU;QAC3B,OAAO,IAA6D;IACtE;IAEA;;;;;QAMA,cAAW;QAGT,gFAAgF;QAChF,kEAAkE;QAClE,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO;YACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU;QAC7B,OAAO;YACL,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU;QAC7B;QACA,IAAI,CAAC,aAAa,GAAG;QACrB,OAAO,IAAoE;IAC7E;IAEA;;QAGA,MAAG;QACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU;QAC3B,OAAO,IAA0D;IACnE;IAEA;;QAGA,UAAO;QACL,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU;QAC3B,OAAO,IAA2E;IACpF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;QAyBA,QAAQ,EACN,UAAU,KAAK,EACf,UAAU,KAAK,EACf,WAAW,KAAK,EAChB,UAAU,KAAK,EACf,MAAM,KAAK,EACX,SAAS,MAAM,EAAA,GAQb,CAAA,CAAE,EAAA;;QACJ,MAAM,UAAU;YACd,UAAU,YAAY;YACtB,UAAU,YAAY;YACtB,WAAW,aAAa;YACxB,UAAU,YAAY;YACtB,MAAM,QAAQ;SACf,CACE,MAAM,CAAC,SACP,IAAI,CAAC;QACR,oFAAoF;QACpF,MAAM,eAAe,CAAA,KAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI;QACnD,IAAI,CAAC,OAAO,CAAC,GAAG,CACd,UACA,CAAA,2BAAA,EAA8B,OAAM,OAAA,EAAU,aAAY,WAAA,EAAc,QAAO,CAAA,CAAG;QAEpF,IAAI,WAAW,QAAQ;YACrB,OAAO,IAA6E;QACtF,OAAO;YACL,OAAO,IAA0D;QACnE;IACF;IAEA;;;;QAKA,WAAQ;QACN,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU;QAC9B,OAAO,IAAI;IACb;IAEA;;;;;QAMA,UAAO;QASL,OAAO,IAQN;IACH;IAEA;;;;;QAMA,YAAY,KAAa,EAAA;QAMvB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU;QAC9B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAA,aAAA,EAAgB,MAAK,CAAE;QACrD,OAAO,IAIqE;IAC9E;;AApWF,QAAA,OAAA,GAAA"}},
    {"offset": {"line": 706, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 710, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts"],"sourcesContent":["import PostgrestTransformBuilder from './PostgrestTransformBuilder'\nimport { JsonPathToAccessor, JsonPathToType } from './select-query-parser/utils'\nimport { ClientServerOptions, GenericSchema } from './types'\n\ntype FilterOperator =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'like'\n  | 'ilike'\n  | 'is'\n  | 'in'\n  | 'cs'\n  | 'cd'\n  | 'sl'\n  | 'sr'\n  | 'nxl'\n  | 'nxr'\n  | 'adj'\n  | 'ov'\n  | 'fts'\n  | 'plfts'\n  | 'phfts'\n  | 'wfts'\n\nexport type IsStringOperator<Path extends string> = Path extends `${string}->>${string}`\n  ? true\n  : false\n\n// Match relationship filters with `table.column` syntax and resolve underlying\n// column value. If not matched, fallback to generic type.\n// TODO: Validate the relationship itself ala select-query-parser. Currently we\n// assume that all tables have valid relationships to each other, despite\n// nonexistent foreign keys.\ntype ResolveFilterValue<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  ColumnName extends string,\n> = ColumnName extends `${infer RelationshipTable}.${infer Remainder}`\n  ? Remainder extends `${infer _}.${infer _}`\n    ? ResolveFilterValue<Schema, Row, Remainder>\n    : ResolveFilterRelationshipValue<Schema, RelationshipTable, Remainder>\n  : ColumnName extends keyof Row\n    ? Row[ColumnName]\n    : // If the column selection is a jsonpath like `data->value` or `data->>value` we attempt to match\n      // the expected type with the parsed custom json type\n      IsStringOperator<ColumnName> extends true\n      ? string\n      : JsonPathToType<Row, JsonPathToAccessor<ColumnName>> extends infer JsonPathValue\n        ? JsonPathValue extends never\n          ? never\n          : JsonPathValue\n        : never\n\ntype ResolveFilterRelationshipValue<\n  Schema extends GenericSchema,\n  RelationshipTable extends string,\n  RelationshipColumn extends string,\n> = Schema['Tables'] & Schema['Views'] extends infer TablesAndViews\n  ? RelationshipTable extends keyof TablesAndViews\n    ? 'Row' extends keyof TablesAndViews[RelationshipTable]\n      ? RelationshipColumn extends keyof TablesAndViews[RelationshipTable]['Row']\n        ? TablesAndViews[RelationshipTable]['Row'][RelationshipColumn]\n        : unknown\n      : unknown\n    : unknown\n  : never\n\nexport type InvalidMethodError<S extends string> = { Error: S }\n\nexport default class PostgrestFilterBuilder<\n  ClientOptions extends ClientServerOptions,\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result,\n  RelationName = unknown,\n  Relationships = unknown,\n  Method = unknown,\n> extends PostgrestTransformBuilder<\n  ClientOptions,\n  Schema,\n  Row,\n  Result,\n  RelationName,\n  Relationships,\n  Method\n> {\n  /**\n   * Match only rows where `column` is equal to `value`.\n   *\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  eq<ColumnName extends string>(\n    column: ColumnName,\n    value: ResolveFilterValue<Schema, Row, ColumnName> extends never\n      ? NonNullable<unknown>\n      : // We want to infer the type before wrapping it into a `NonNullable` to avoid too deep\n        // type resolution error\n        ResolveFilterValue<Schema, Row, ColumnName> extends infer ResolvedFilterValue\n        ? NonNullable<ResolvedFilterValue>\n        : // We should never enter this case as all the branches are covered above\n          never\n  ): this {\n    this.url.searchParams.append(column, `eq.${value}`)\n    return this\n  }\n\n  /**\n   * Match only rows where `column` is not equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  neq<ColumnName extends string>(\n    column: ColumnName,\n    value: ResolveFilterValue<Schema, Row, ColumnName> extends never\n      ? unknown\n      : ResolveFilterValue<Schema, Row, ColumnName> extends infer ResolvedFilterValue\n        ? ResolvedFilterValue\n        : never\n  ): this {\n    this.url.searchParams.append(column, `neq.${value}`)\n    return this\n  }\n\n  gt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  gt(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is greater than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  gt(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `gt.${value}`)\n    return this\n  }\n\n  gte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  gte(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is greater than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  gte(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `gte.${value}`)\n    return this\n  }\n\n  lt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  lt(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is less than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  lt(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `lt.${value}`)\n    return this\n  }\n\n  lte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  lte(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is less than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  lte(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `lte.${value}`)\n    return this\n  }\n\n  like<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\n  like(column: string, pattern: string): this\n  /**\n   * Match only rows where `column` matches `pattern` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n  like(column: string, pattern: string): this {\n    this.url.searchParams.append(column, `like.${pattern}`)\n    return this\n  }\n\n  likeAllOf<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    patterns: readonly string[]\n  ): this\n  likeAllOf(column: string, patterns: readonly string[]): this\n  /**\n   * Match only rows where `column` matches all of `patterns` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  likeAllOf(column: string, patterns: readonly string[]): this {\n    this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`)\n    return this\n  }\n\n  likeAnyOf<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    patterns: readonly string[]\n  ): this\n  likeAnyOf(column: string, patterns: readonly string[]): this\n  /**\n   * Match only rows where `column` matches any of `patterns` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  likeAnyOf(column: string, patterns: readonly string[]): this {\n    this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`)\n    return this\n  }\n\n  ilike<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\n  ilike(column: string, pattern: string): this\n  /**\n   * Match only rows where `column` matches `pattern` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n  ilike(column: string, pattern: string): this {\n    this.url.searchParams.append(column, `ilike.${pattern}`)\n    return this\n  }\n\n  ilikeAllOf<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    patterns: readonly string[]\n  ): this\n  ilikeAllOf(column: string, patterns: readonly string[]): this\n  /**\n   * Match only rows where `column` matches all of `patterns` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  ilikeAllOf(column: string, patterns: readonly string[]): this {\n    this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`)\n    return this\n  }\n\n  ilikeAnyOf<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    patterns: readonly string[]\n  ): this\n  ilikeAnyOf(column: string, patterns: readonly string[]): this\n  /**\n   * Match only rows where `column` matches any of `patterns` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  ilikeAnyOf(column: string, patterns: readonly string[]): this {\n    this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`)\n    return this\n  }\n\n  is<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: Row[ColumnName] & (boolean | null)\n  ): this\n  is(column: string, value: boolean | null): this\n  /**\n   * Match only rows where `column` IS `value`.\n   *\n   * For non-boolean columns, this is only relevant for checking if the value of\n   * `column` is NULL by setting `value` to `null`.\n   *\n   * For boolean columns, you can also set `value` to `true` or `false` and it\n   * will behave the same way as `.eq()`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  is(column: string, value: boolean | null): this {\n    this.url.searchParams.append(column, `is.${value}`)\n    return this\n  }\n\n  /**\n   * Match only rows where `column` is included in the `values` array.\n   *\n   * @param column - The column to filter on\n   * @param values - The values array to filter with\n   */\n  in<ColumnName extends string>(\n    column: ColumnName,\n    values: ReadonlyArray<\n      ResolveFilterValue<Schema, Row, ColumnName> extends never\n        ? unknown\n        : // We want to infer the type before wrapping it into a `NonNullable` to avoid too deep\n          // type resolution error\n          ResolveFilterValue<Schema, Row, ColumnName> extends infer ResolvedFilterValue\n          ? ResolvedFilterValue\n          : // We should never enter this case as all the branches are covered above\n            never\n    >\n  ): this {\n    const cleanedValues = Array.from(new Set(values))\n      .map((s) => {\n        // handle postgrest reserved characters\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`\n        else return `${s}`\n      })\n      .join(',')\n    this.url.searchParams.append(column, `in.(${cleanedValues})`)\n    return this\n  }\n\n  contains<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | ReadonlyArray<Row[ColumnName]> | Record<string, unknown>\n  ): this\n  contains(column: string, value: string | readonly unknown[] | Record<string, unknown>): this\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * `column` contains every element appearing in `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n  contains(column: string, value: string | readonly unknown[] | Record<string, unknown>): this {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(column, `cs.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  containedBy<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | ReadonlyArray<Row[ColumnName]> | Record<string, unknown>\n  ): this\n  containedBy(column: string, value: string | readonly unknown[] | Record<string, unknown>): this\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * every element appearing in `column` is contained by `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n  containedBy(column: string, value: string | readonly unknown[] | Record<string, unknown>): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `cd.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  rangeGt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeGt(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is greater than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeGt(column: string, range: string): this {\n    this.url.searchParams.append(column, `sr.${range}`)\n    return this\n  }\n\n  rangeGte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeGte(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or greater than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeGte(column: string, range: string): this {\n    this.url.searchParams.append(column, `nxl.${range}`)\n    return this\n  }\n\n  rangeLt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeLt(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is less than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeLt(column: string, range: string): this {\n    this.url.searchParams.append(column, `sl.${range}`)\n    return this\n  }\n\n  rangeLte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeLte(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or less than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeLte(column: string, range: string): this {\n    this.url.searchParams.append(column, `nxr.${range}`)\n    return this\n  }\n\n  rangeAdjacent<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeAdjacent(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where `column` is\n   * mutually exclusive to `range` and there can be no element between the two\n   * ranges.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeAdjacent(column: string, range: string): this {\n    this.url.searchParams.append(column, `adj.${range}`)\n    return this\n  }\n\n  overlaps<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | ReadonlyArray<Row[ColumnName]>\n  ): this\n  overlaps(column: string, value: string | readonly unknown[]): this\n  /**\n   * Only relevant for array and range columns. Match only rows where\n   * `column` and `value` have an element in common.\n   *\n   * @param column - The array or range column to filter on\n   * @param value - The array or range value to filter with\n   */\n  overlaps(column: string, value: string | readonly unknown[]): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `ov.${value}`)\n    } else {\n      // array\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`)\n    }\n    return this\n  }\n\n  textSearch<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    query: string,\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\n  ): this\n  textSearch(\n    column: string,\n    query: string,\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\n  ): this\n  /**\n   * Only relevant for text and tsvector columns. Match only rows where\n   * `column` matches the query string in `query`.\n   *\n   * @param column - The text or tsvector column to filter on\n   * @param query - The query text to match with\n   * @param options - Named parameters\n   * @param options.config - The text search configuration to use\n   * @param options.type - Change how the `query` text is interpreted\n   */\n  textSearch(\n    column: string,\n    query: string,\n    { config, type }: { config?: string; type?: 'plain' | 'phrase' | 'websearch' } = {}\n  ): this {\n    let typePart = ''\n    if (type === 'plain') {\n      typePart = 'pl'\n    } else if (type === 'phrase') {\n      typePart = 'ph'\n    } else if (type === 'websearch') {\n      typePart = 'w'\n    }\n    const configPart = config === undefined ? '' : `(${config})`\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`)\n    return this\n  }\n\n  match<ColumnName extends string & keyof Row>(query: Record<ColumnName, Row[ColumnName]>): this\n  match(query: Record<string, unknown>): this\n  /**\n   * Match only rows where each column in `query` keys is equal to its\n   * associated value. Shorthand for multiple `.eq()`s.\n   *\n   * @param query - The object to filter with, with column names as keys mapped\n   * to their filter values\n   */\n  match(query: Record<string, unknown>): this {\n    Object.entries(query).forEach(([column, value]) => {\n      this.url.searchParams.append(column, `eq.${value}`)\n    })\n    return this\n  }\n\n  not<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    operator: FilterOperator,\n    value: Row[ColumnName]\n  ): this\n  not(column: string, operator: string, value: unknown): this\n  /**\n   * Match only rows which doesn't satisfy the filter.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to be negated to filter with, following\n   * PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n  not(column: string, operator: string, value: unknown): this {\n    this.url.searchParams.append(column, `not.${operator}.${value}`)\n    return this\n  }\n\n  /**\n   * Match only rows which satisfy at least one of the filters.\n   *\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure it's properly sanitized.\n   *\n   * It's currently not possible to do an `.or()` filter across multiple tables.\n   *\n   * @param filters - The filters to use, following PostgREST syntax\n   * @param options - Named parameters\n   * @param options.referencedTable - Set this to filter on referenced tables\n   * instead of the parent table\n   * @param options.foreignTable - Deprecated, use `referencedTable` instead\n   */\n  or(\n    filters: string,\n    {\n      foreignTable,\n      referencedTable = foreignTable,\n    }: { foreignTable?: string; referencedTable?: string } = {}\n  ): this {\n    const key = referencedTable ? `${referencedTable}.or` : 'or'\n    this.url.searchParams.append(key, `(${filters})`)\n    return this\n  }\n\n  filter<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    operator: `${'' | 'not.'}${FilterOperator}`,\n    value: unknown\n  ): this\n  filter(column: string, operator: string, value: unknown): this\n  /**\n   * Match only rows which satisfy the filter. This is an escape hatch - you\n   * should use the specific filter methods wherever possible.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to filter with, following PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n  filter(column: string, operator: string, value: unknown): this {\n    this.url.searchParams.append(column, `${operator}.${value}`)\n    return this\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA,MAAA,8BAAA;AAyEA,MAAqB,+BAQX,4BAAA,OAQT;IACC;;;;;;;QAQA,GACE,MAAkB,EAClB,KAOW,EAAA;QAEX,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QAClD,OAAO,IAAI;IACb;IAEA;;;;;QAMA,IACE,MAAkB,EAClB,KAIW,EAAA;QAEX,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,MAAK,CAAE;QACnD,OAAO,IAAI;IACb;IAIA;;;;;QAMA,GAAG,MAAc,EAAE,KAAc,EAAA;QAC/B,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QAClD,OAAO,IAAI;IACb;IAIA;;;;;QAMA,IAAI,MAAc,EAAE,KAAc,EAAA;QAChC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,MAAK,CAAE;QACnD,OAAO,IAAI;IACb;IAIA;;;;;QAMA,GAAG,MAAc,EAAE,KAAc,EAAA;QAC/B,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QAClD,OAAO,IAAI;IACb;IAIA;;;;;QAMA,IAAI,MAAc,EAAE,KAAc,EAAA;QAChC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,MAAK,CAAE;QACnD,OAAO,IAAI;IACb;IAIA;;;;;QAMA,KAAK,MAAc,EAAE,OAAe,EAAA;QAClC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,KAAA,EAAQ,QAAO,CAAE;QACtD,OAAO,IAAI;IACb;IAOA;;;;;QAMA,UAAU,MAAc,EAAE,QAA2B,EAAA;QACnD,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,WAAA,EAAc,SAAS,IAAI,CAAC,KAAI,CAAA,CAAG;QACxE,OAAO,IAAI;IACb;IAOA;;;;;QAMA,UAAU,MAAc,EAAE,QAA2B,EAAA;QACnD,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,WAAA,EAAc,SAAS,IAAI,CAAC,KAAI,CAAA,CAAG;QACxE,OAAO,IAAI;IACb;IAIA;;;;;QAMA,MAAM,MAAc,EAAE,OAAe,EAAA;QACnC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,MAAA,EAAS,QAAO,CAAE;QACvD,OAAO,IAAI;IACb;IAOA;;;;;QAMA,WAAW,MAAc,EAAE,QAA2B,EAAA;QACpD,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,YAAA,EAAe,SAAS,IAAI,CAAC,KAAI,CAAA,CAAG;QACzE,OAAO,IAAI;IACb;IAOA;;;;;QAMA,WAAW,MAAc,EAAE,QAA2B,EAAA;QACpD,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,YAAA,EAAe,SAAS,IAAI,CAAC,KAAI,CAAA,CAAG;QACzE,OAAO,IAAI;IACb;IAOA;;;;;;;;;;;QAYA,GAAG,MAAc,EAAE,KAAqB,EAAA;QACtC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QAClD,OAAO,IAAI;IACb;IAEA;;;;;QAMA,GACE,MAAkB,EAClB,MASC,EAAA;QAED,MAAM,gBAAgB,MAAM,IAAI,CAAC,IAAI,IAAI,SACtC,GAAG,CAAC,CAAC;YACJ,uCAAuC;YACvC,+DAA+D;YAC/D,IAAI,OAAO,MAAM,YAAY,IAAI,OAAO,SAAS,IAAI,CAAC,IAAI,OAAO,CAAA,CAAA,EAAI,EAAC,CAAA,CAAG;iBACpE,OAAO,CAAA,EAAG,EAAC,CAAE;QACpB,GACC,IAAI,CAAC;QACR,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,cAAa,CAAA,CAAG;QAC5D,OAAO,IAAI;IACb;IAOA;;;;;;QAOA,SAAS,MAAc,EAAE,KAA4D,EAAA;QACnF,IAAI,OAAO,UAAU,UAAU;YAC7B,sEAAsE;YACtE,qCAAqC;YACrC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QACpD,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ;YAC/B,QAAQ;YACR,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,MAAM,IAAI,CAAC,KAAI,CAAA,CAAG;QAChE,OAAO;YACL,OAAO;YACP,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,KAAK,SAAS,CAAC,OAAM,CAAE;QACpE;QACA,OAAO,IAAI;IACb;IAOA;;;;;;QAOA,YAAY,MAAc,EAAE,KAA4D,EAAA;QACtF,IAAI,OAAO,UAAU,UAAU;YAC7B,QAAQ;YACR,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QACpD,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ;YAC/B,QAAQ;YACR,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,MAAM,IAAI,CAAC,KAAI,CAAA,CAAG;QAChE,OAAO;YACL,OAAO;YACP,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,KAAK,SAAS,CAAC,OAAM,CAAE;QACpE;QACA,OAAO,IAAI;IACb;IAIA;;;;;;QAOA,QAAQ,MAAc,EAAE,KAAa,EAAA;QACnC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QAClD,OAAO,IAAI;IACb;IAIA;;;;;;;QAQA,SAAS,MAAc,EAAE,KAAa,EAAA;QACpC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,MAAK,CAAE;QACnD,OAAO,IAAI;IACb;IAIA;;;;;;QAOA,QAAQ,MAAc,EAAE,KAAa,EAAA;QACnC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QAClD,OAAO,IAAI;IACb;IAIA;;;;;;;QAQA,SAAS,MAAc,EAAE,KAAa,EAAA;QACpC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,MAAK,CAAE;QACnD,OAAO,IAAI;IACb;IAIA;;;;;;;QAQA,cAAc,MAAc,EAAE,KAAa,EAAA;QACzC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,MAAK,CAAE;QACnD,OAAO,IAAI;IACb;IAOA;;;;;;QAOA,SAAS,MAAc,EAAE,KAAkC,EAAA;QACzD,IAAI,OAAO,UAAU,UAAU;YAC7B,QAAQ;YACR,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QACpD,OAAO;YACL,QAAQ;YACR,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,MAAM,IAAI,CAAC,KAAI,CAAA,CAAG;QAChE;QACA,OAAO,IAAI;IACb;IAYA;;;;;;;;;QAUA,WACE,MAAc,EACd,KAAa,EACb,EAAE,MAAM,EAAE,IAAI,EAAA,GAAmE,CAAA,CAAE,EAAA;QAEnF,IAAI,WAAW;QACf,IAAI,SAAS,SAAS;YACpB,WAAW;QACb,OAAO,IAAI,SAAS,UAAU;YAC5B,WAAW;QACb,OAAO,IAAI,SAAS,aAAa;YAC/B,WAAW;QACb;QACA,MAAM,aAAa,WAAW,YAAY,KAAK,CAAA,CAAA,EAAI,OAAM,CAAA,CAAG;QAC5D,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,EAAG,SAAQ,GAAA,EAAM,WAAU,CAAA,EAAI,MAAK,CAAE;QAC3E,OAAO,IAAI;IACb;IAIA;;;;;;QAOA,MAAM,KAA8B,EAAA;QAClC,OAAO,OAAO,CAAC,OAAO,OAAO,CAAC,CAAC,CAAC,QAAQ,MAAM;YAC5C,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,GAAA,EAAM,MAAK,CAAE;QACpD;QACA,OAAO,IAAI;IACb;IAQA;;;;;;;;;;;;QAaA,IAAI,MAAc,EAAE,QAAgB,EAAE,KAAc,EAAA;QAClD,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,IAAA,EAAO,SAAQ,CAAA,EAAI,MAAK,CAAE;QAC/D,OAAO,IAAI;IACb;IAEA;;;;;;;;;;;;;;QAeA,GACE,OAAe,EACf,EACE,YAAY,EACZ,kBAAkB,YAAY,EAAA,GACyB,CAAA,CAAE,EAAA;QAE3D,MAAM,MAAM,kBAAkB,CAAA,EAAG,gBAAe,GAAA,CAAK,GAAG;QACxD,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAA,CAAA,EAAI,QAAO,CAAA,CAAG;QAChD,OAAO,IAAI;IACb;IAQA;;;;;;;;;;;;QAaA,OAAO,MAAc,EAAE,QAAgB,EAAE,KAAc,EAAA;QACrD,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAA,EAAG,SAAQ,CAAA,EAAI,MAAK,CAAE;QAC3D,OAAO,IAAI;IACb;;AAjhBF,QAAA,OAAA,GAAA"}},
    {"offset": {"line": 1056, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1060, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/postgrest-js/src/PostgrestQueryBuilder.ts"],"sourcesContent":["import PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport { GetResult } from './select-query-parser/result'\nimport { ClientServerOptions, Fetch, GenericSchema, GenericTable, GenericView } from './types'\n\nexport default class PostgrestQueryBuilder<\n  ClientOptions extends ClientServerOptions,\n  Schema extends GenericSchema,\n  Relation extends GenericTable | GenericView,\n  RelationName = unknown,\n  Relationships = Relation extends { Relationships: infer R } ? R : unknown,\n> {\n  url: URL\n  headers: Headers\n  schema?: string\n  signal?: AbortSignal\n  fetch?: Fetch\n\n  constructor(\n    url: URL,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: HeadersInit\n      schema?: string\n      fetch?: Fetch\n    }\n  ) {\n    this.url = url\n    this.headers = new Headers(headers)\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  /**\n   * Perform a SELECT query on the table or view.\n   *\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n   *\n   * @param options - Named parameters\n   *\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   *\n   * @param options.count - Count algorithm to use to count rows in the table or view.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  select<\n    Query extends string = '*',\n    ResultOne = GetResult<\n      Schema,\n      Relation['Row'],\n      RelationName,\n      Relationships,\n      Query,\n      ClientOptions\n    >,\n  >(\n    columns?: Query,\n    options?: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Relation['Row'],\n    ResultOne[],\n    RelationName,\n    Relationships,\n    'GET'\n  > {\n    const { head = false, count } = options ?? {}\n\n    const method = head ? 'HEAD' : 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n\n    if (count) {\n      this.headers.append('Prefer', `count=${count}`)\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n    })\n  }\n\n  // TODO(v3): Make `defaultToNull` consistent for both single & bulk inserts.\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row,\n    options?: {\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Relation['Row'],\n    null,\n    RelationName,\n    Relationships,\n    'POST'\n  >\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row[],\n    options?: {\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    }\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Relation['Row'],\n    null,\n    RelationName,\n    Relationships,\n    'POST'\n  >\n  /**\n   * Perform an INSERT into the table or view.\n   *\n   * By default, inserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to insert. Pass an object to insert a single row\n   * or an array to insert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count inserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column. Only applies for bulk\n   * inserts.\n   */\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      count,\n      defaultToNull = true,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Relation['Row'],\n    null,\n    RelationName,\n    Relationships,\n    'POST'\n  > {\n    const method = 'POST'\n\n    if (count) {\n      this.headers.append('Prefer', `count=${count}`)\n    }\n    if (!defaultToNull) {\n      this.headers.append('Prefer', `missing=default`)\n    }\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch ?? fetch,\n    })\n  }\n\n  // TODO(v3): Make `defaultToNull` consistent for both single & bulk upserts.\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row,\n    options?: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Relation['Row'],\n    null,\n    RelationName,\n    Relationships,\n    'POST'\n  >\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row[],\n    options?: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    }\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Relation['Row'],\n    null,\n    RelationName,\n    Relationships,\n    'POST'\n  >\n  /**\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n   * exist, or if it does exist, perform an alternative action depending on\n   * `ignoreDuplicates`.\n   *\n   * By default, upserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to upsert with. Pass an object to upsert a\n   * single row or an array to upsert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n   * duplicate rows are determined. Two rows are duplicates if all the\n   * `onConflict` columns are equal.\n   *\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n   * `false`, duplicate rows are merged with existing rows.\n   *\n   * @param options.count - Count algorithm to use to count upserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column. This only applies when\n   * inserting new rows, not when merging with existing rows under\n   * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n   */\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true,\n    }: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Relation['Row'],\n    null,\n    RelationName,\n    Relationships,\n    'POST'\n  > {\n    const method = 'POST'\n\n    this.headers.append('Prefer', `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`)\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    if (count) {\n      this.headers.append('Prefer', `count=${count}`)\n    }\n    if (!defaultToNull) {\n      this.headers.append('Prefer', 'missing=default')\n    }\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch ?? fetch,\n    })\n  }\n\n  /**\n   * Perform an UPDATE on the table or view.\n   *\n   * By default, updated rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param values - The values to update with\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count updated rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  update<Row extends Relation extends { Update: unknown } ? Relation['Update'] : never>(\n    values: Row,\n    {\n      count,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Relation['Row'],\n    null,\n    RelationName,\n    Relationships,\n    'PATCH'\n  > {\n    const method = 'PATCH'\n    if (count) {\n      this.headers.append('Prefer', `count=${count}`)\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch ?? fetch,\n    })\n  }\n\n  /**\n   * Perform a DELETE on the table or view.\n   *\n   * By default, deleted rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count deleted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  delete({\n    count,\n  }: {\n    count?: 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Relation['Row'],\n    null,\n    RelationName,\n    Relationships,\n    'DELETE'\n  > {\n    const method = 'DELETE'\n    if (count) {\n      this.headers.append('Prefer', `count=${count}`)\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch ?? fetch,\n    })\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1310, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1314, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/postgrest-js/src/PostgrestClient.ts"],"sourcesContent":["import PostgrestQueryBuilder from './PostgrestQueryBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport { Fetch, GenericSchema, ClientServerOptions } from './types'\n\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient<\n  Database = any,\n  ClientOptions extends ClientServerOptions = Database extends {\n    __InternalSupabase: infer I extends ClientServerOptions\n  }\n    ? I\n    : {},\n  SchemaName extends string &\n    keyof Omit<Database, '__InternalSupabase'> = 'public' extends keyof Omit<\n    Database,\n    '__InternalSupabase'\n  >\n    ? 'public'\n    : string & keyof Omit<Database, '__InternalSupabase'>,\n  Schema extends GenericSchema = Omit<\n    Database,\n    '__InternalSupabase'\n  >[SchemaName] extends GenericSchema\n    ? Omit<Database, '__InternalSupabase'>[SchemaName]\n    : any,\n> {\n  url: string\n  headers: Headers\n  schemaName?: SchemaName\n  fetch?: Fetch\n\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: HeadersInit\n      schema?: SchemaName\n      fetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = new Headers(headers)\n    this.schemaName = schema\n    this.fetch = fetch\n  }\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName],\n  >(relation: TableName): PostgrestQueryBuilder<ClientOptions, Schema, Table, TableName>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<ClientOptions, Schema, View, ViewName>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<ClientOptions, Schema, any, any> {\n    const url = new URL(`${this.url}/${relation}`)\n    return new PostgrestQueryBuilder(url, {\n      headers: new Headers(this.headers),\n      schema: this.schemaName,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema<DynamicSchema extends string & keyof Omit<Database, '__InternalSupabase'>>(\n    schema: DynamicSchema\n  ): PostgrestClient<\n    Database,\n    ClientOptions,\n    DynamicSchema,\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\n  > {\n    return new PostgrestClient(this.url, {\n      headers: this.headers,\n      schema,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(\n    fn: FnName,\n    args: Fn['Args'] = {},\n    {\n      head = false,\n      get = false,\n      count,\n    }: {\n      head?: boolean\n      get?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Fn['Returns'] extends any[]\n      ? Fn['Returns'][number] extends Record<string, unknown>\n        ? Fn['Returns'][number]\n        : never\n      : never,\n    Fn['Returns'],\n    FnName,\n    null,\n    'RPC'\n  > {\n    let method: 'HEAD' | 'GET' | 'POST'\n    const url = new URL(`${this.url}/rpc/${fn}`)\n    let body: unknown | undefined\n    if (head || get) {\n      method = head ? 'HEAD' : 'GET'\n      Object.entries(args)\n        // params with undefined value needs to be filtered out, otherwise it'll\n        // show up as `?param=undefined`\n        .filter(([_, value]) => value !== undefined)\n        // array values need special syntax\n        .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`])\n        .forEach(([name, value]) => {\n          url.searchParams.append(name, value)\n        })\n    } else {\n      method = 'POST'\n      body = args\n    }\n\n    const headers = new Headers(this.headers)\n    if (count) {\n      headers.set('Prefer', `count=${count}`)\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schemaName,\n      body,\n      fetch: this.fetch ?? fetch,\n    })\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA,MAAA,0BAAA;AACA,MAAA,2BAAA;AAGA;;;;;;;;;IAUA,MAAqB;IA0BnB,mEAAmE;IACnE;;;;;;;;QASA,YACE,GAAW,EACX,EACE,UAAU,CAAA,CAAE,EACZ,MAAM,EACN,OAAA,MAAK,EAAA,GAKH,CAAA,CAAE,CAAA;QAEN,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,OAAO,GAAG,IAAI,QAAQ;QAC3B,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,KAAK,GAAG;IACf;IAQA;;;;QAKA,KAAK,QAAgB,EAAA;QACnB,MAAM,MAAM,IAAI,IAAI,CAAA,EAAG,IAAI,CAAC,GAAG,CAAA,CAAA,EAAI,SAAQ,CAAE;QAC7C,OAAO,IAAI,wBAAA,OAAqB,CAAC,KAAK;YACpC,SAAS,IAAI,QAAQ,IAAI,CAAC,OAAO;YACjC,QAAQ,IAAI,CAAC,UAAU;YACvB,OAAO,IAAI,CAAC,KAAK;;IAErB;IAEA;;;;;;QAOA,OACE,MAAqB,EAAA;QAOrB,OAAO,IAAI,gBAAgB,IAAI,CAAC,GAAG,EAAE;YACnC,SAAS,IAAI,CAAC,OAAO;YACrB;YACA,OAAO,IAAI,CAAC,KAAK;;IAErB;IAEA;;;;;;;;;;;;;;;;;;;;;;QAuBA,IACE,EAAU,EACV,OAAmB,CAAA,CAAE,EACrB,EACE,OAAO,KAAK,EACZ,MAAM,KAAK,EACX,KAAK,EAAA,GAKH,CAAA,CAAE,EAAA;;QAcN,IAAI;QACJ,MAAM,MAAM,IAAI,IAAI,CAAA,EAAG,IAAI,CAAC,GAAG,CAAA,KAAA,EAAQ,GAAE,CAAE;QAC3C,IAAI;QACJ,IAAI,QAAQ,KAAK;YACf,SAAS,OAAO,SAAS;YACzB,OAAO,OAAO,CAAC,KACb,wEAAwE;YACxE,gCAAgC;aAC/B,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,GAAK,UAAU,UAClC,mCAAmC;aAClC,GAAG,CAAC,CAAC,CAAC,MAAM,MAAM,GAAK;oBAAC;oBAAM,MAAM,OAAO,CAAC,SAAS,CAAA,CAAA,EAAI,MAAM,IAAI,CAAC,KAAI,CAAA,CAAG,GAAG,CAAA,EAAG,MAAK,CAAE;iBAAC,EACzF,OAAO,CAAC,CAAC,CAAC,MAAM,MAAM;gBACrB,IAAI,YAAY,CAAC,MAAM,CAAC,MAAM;YAChC;QACJ,OAAO;YACL,SAAS;YACT,OAAO;QACT;QAEA,MAAM,UAAU,IAAI,QAAQ,IAAI,CAAC,OAAO;QACxC,IAAI,OAAO;YACT,QAAQ,GAAG,CAAC,UAAU,CAAA,MAAA,EAAS,MAAK,CAAE;QACxC;QAEA,OAAO,IAAI,yBAAA,OAAsB,CAAC;YAChC;YACA;YACA;YACA,QAAQ,IAAI,CAAC,UAAU;YACvB;YACA,OAAO,CAAA,KAAA,IAAI,CAAC,KAAK,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI;;IAEzB;;AAhLF,QAAA,OAAA,GAAA"}},
    {"offset": {"line": 1432, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1436, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/postgrest-js/src/index.ts"],"sourcesContent":["// Always update wrapper.mjs when updating this file.\nimport PostgrestClient from './PostgrestClient'\nimport PostgrestQueryBuilder from './PostgrestQueryBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport PostgrestTransformBuilder from './PostgrestTransformBuilder'\nimport PostgrestBuilder from './PostgrestBuilder'\nimport PostgrestError from './PostgrestError'\n\nexport {\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n}\nexport default {\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n}\nexport type {\n  PostgrestResponse,\n  PostgrestResponseFailure,\n  PostgrestResponseSuccess,\n  PostgrestSingleResponse,\n  PostgrestMaybeSingleResponse,\n  ClientServerOptions as PostgrestClientOptions,\n} from './types'\n// https://github.com/supabase/postgrest-js/issues/551\n// To be replaced with a helper type that only uses public types\nexport type { GetResult as UnstableGetResult } from './select-query-parser/result'\n"],"names":[],"mappings":";;;;;;;;;;AAAA,qDAAqD;AACrD,MAAA,oBAAA;AAQE,QAAA,eAAA,GARK,kBAAA,OAAe;AACtB,MAAA,0BAAA;AAQE,QAAA,qBAAA,GARK,wBAAA,OAAqB;AAC5B,MAAA,2BAAA;AAQE,QAAA,sBAAA,GARK,yBAAA,OAAsB;AAC7B,MAAA,8BAAA;AAQE,QAAA,yBAAA,GARK,4BAAA,OAAyB;AAChC,MAAA,qBAAA;AAQE,QAAA,gBAAA,GARK,mBAAA,OAAgB;AACvB,MAAA,mBAAA;AAQE,QAAA,cAAA,GARK,iBAAA,OAAc;AAUrB,QAAA,OAAA,GAAe;IACb,iBAAA,kBAAA,OAAe;IACf,uBAAA,wBAAA,OAAqB;IACrB,wBAAA,yBAAA,OAAsB;IACtB,2BAAA,4BAAA,OAAyB;IACzB,kBAAA,mBAAA,OAAgB;IAChB,gBAAA,iBAAA,OAAc"}},
    {"offset": {"line": 1467, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1472, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs"],"sourcesContent":["import index from '../cjs/index.js'\nconst {\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n} = index\n\nexport {\n  PostgrestBuilder,\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n  PostgrestTransformBuilder,\n  PostgrestError,\n}\n\n// compatibility with CJS output\nexport default {\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AACA,MAAM,EACJ,eAAe,EACf,qBAAqB,EACrB,sBAAsB,EACtB,yBAAyB,EACzB,gBAAgB,EAChB,cAAc,EACf,GAAG,wKAAA,CAAA,UAAK;;uCAYM;IACb;IACA;IACA;IACA;IACA;IACA;AACF"}},
    {"offset": {"line": 1494, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1499, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/lib/websocket-factory.ts"],"sourcesContent":["export interface WebSocketLike {\n  readonly CONNECTING: number\n  readonly OPEN: number\n  readonly CLOSING: number\n  readonly CLOSED: number\n  readonly readyState: number\n  readonly url: string\n  readonly protocol: string\n\n  close(code?: number, reason?: string): void\n  send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void\n\n  onopen: ((this: any, ev: Event) => any) | null\n  onmessage: ((this: any, ev: MessageEvent) => any) | null\n  onclose: ((this: any, ev: CloseEvent) => any) | null\n  onerror: ((this: any, ev: Event) => any) | null\n\n  addEventListener(type: string, listener: EventListener): void\n  removeEventListener(type: string, listener: EventListener): void\n\n  // Add additional properties that may exist on WebSocket implementations\n  binaryType?: string\n  bufferedAmount?: number\n  extensions?: string\n  dispatchEvent?: (event: Event) => boolean\n}\n\nexport interface WebSocketEnvironment {\n  type: 'native' | 'ws' | 'cloudflare' | 'unsupported'\n  constructor?: any\n  error?: string\n  workaround?: string\n}\n\nexport class WebSocketFactory {\n  private static detectEnvironment(): WebSocketEnvironment {\n    if (typeof WebSocket !== 'undefined') {\n      return { type: 'native', constructor: WebSocket }\n    }\n\n    if (typeof globalThis !== 'undefined' && typeof (globalThis as any).WebSocket !== 'undefined') {\n      return { type: 'native', constructor: (globalThis as any).WebSocket }\n    }\n\n    if (typeof global !== 'undefined' && typeof (global as any).WebSocket !== 'undefined') {\n      return { type: 'native', constructor: (global as any).WebSocket }\n    }\n\n    if (\n      typeof globalThis !== 'undefined' &&\n      typeof (globalThis as any).WebSocketPair !== 'undefined' &&\n      typeof globalThis.WebSocket === 'undefined'\n    ) {\n      return {\n        type: 'cloudflare',\n        error:\n          'Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.',\n        workaround:\n          'Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime.',\n      }\n    }\n\n    if (\n      (typeof globalThis !== 'undefined' && (globalThis as any).EdgeRuntime) ||\n      (typeof navigator !== 'undefined' && navigator.userAgent?.includes('Vercel-Edge'))\n    ) {\n      return {\n        type: 'unsupported',\n        error:\n          'Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.',\n        workaround:\n          'Use serverless functions or a different deployment target for WebSocket functionality.',\n      }\n    }\n\n    if (typeof process !== 'undefined') {\n      // Use dynamic property access to avoid Next.js Edge Runtime static analysis warnings\n      const processVersions = (process as any)['versions']\n      if (processVersions && processVersions['node']) {\n        // Remove 'v' prefix if present and parse the major version\n        const versionString = processVersions['node']\n        const nodeVersion = parseInt(versionString.replace(/^v/, '').split('.')[0])\n\n        // Node.js 22+ should have native WebSocket\n        if (nodeVersion >= 22) {\n          // Check if native WebSocket is available (should be in Node.js 22+)\n          if (typeof globalThis.WebSocket !== 'undefined') {\n            return { type: 'native', constructor: globalThis.WebSocket }\n          }\n          // If not available, user needs to provide it\n          return {\n            type: 'unsupported',\n            error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,\n            workaround: 'Provide a WebSocket implementation via the transport option.',\n          }\n        }\n\n        // Node.js < 22 doesn't have native WebSocket\n        return {\n          type: 'unsupported',\n          error: `Node.js ${nodeVersion} detected without native WebSocket support.`,\n          workaround:\n            'For Node.js < 22, install \"ws\" package and provide it via the transport option:\\n' +\n            'import ws from \"ws\"\\n' +\n            'new RealtimeClient(url, { transport: ws })',\n        }\n      }\n    }\n\n    return {\n      type: 'unsupported',\n      error: 'Unknown JavaScript runtime without WebSocket support.',\n      workaround:\n        \"Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation.\",\n    }\n  }\n\n  public static getWebSocketConstructor(): typeof WebSocket {\n    const env = this.detectEnvironment()\n    if (env.constructor) {\n      return env.constructor\n    }\n    let errorMessage = env.error || 'WebSocket not supported in this environment.'\n    if (env.workaround) {\n      errorMessage += `\\n\\nSuggested solution: ${env.workaround}`\n    }\n    throw new Error(errorMessage)\n  }\n\n  public static createWebSocket(url: string | URL, protocols?: string | string[]): WebSocketLike {\n    const WS = this.getWebSocketConstructor()\n    return new WS(url, protocols)\n  }\n\n  public static isWebSocketSupported(): boolean {\n    try {\n      const env = this.detectEnvironment()\n      return env.type === 'native' || env.type === 'ws'\n    } catch {\n      return false\n    }\n  }\n}\n\nexport default WebSocketFactory\n"],"names":[],"mappings":";;;;;;AAkCM,MAAO;IACH,OAAO,oBAAiB;;QAC9B,IAAI,OAAO,cAAc,aAAa;YACpC,OAAO;gBAAE,MAAM;gBAAU,aAAa;YAAS;QACjD;QAEA,IAAI,OAAO,eAAe,eAAe,OAAQ,WAAmB,SAAS,KAAK,aAAa;YAC7F,OAAO;gBAAE,MAAM;gBAAU,aAAc,WAAmB,SAAS;YAAA;QACrE;QAEA,IAAI,OAAO,WAAW,eAAe,OAAQ,OAAe,SAAS,KAAK,aAAa;YACrF,OAAO;gBAAE,MAAM;gBAAU,aAAc,OAAe,SAAS;YAAA;QACjE;QAEA,IACE,OAAO,eAAe,eACtB,OAAQ,WAAmB,aAAa,KAAK,eAC7C,OAAO,WAAW,SAAS,KAAK,aAChC;YACA,OAAO;gBACL,MAAM;gBACN,OACE;gBACF,YACE;;QAEN;QAEA,IACE,AAAC,OAAO,eAAe,eAAgB,WAAmB,WAAW,IACpE,OAAO,cAAc,eAAW,CAAI,CAAA,KAAA,UAAU,SAAS,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,QAAQ,CAAC,cAAc,GACjF;YACA,OAAO;gBACL,MAAM;gBACN,OACE;gBACF,YACE;;QAEN;QAEA,IAAI,OAAO,gKAAA,CAAA,UAAO,KAAK,aAAa;YAClC,qFAAqF;YACrF,MAAM,kBAAmB,gKAAA,CAAA,UAAe,CAAC,WAAW;YACpD,IAAI,mBAAmB,eAAe,CAAC,OAAO,EAAE;gBAC9C,2DAA2D;gBAC3D,MAAM,gBAAgB,eAAe,CAAC,OAAO;gBAC7C,MAAM,cAAc,SAAS,cAAc,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;gBAE1E,2CAA2C;gBAC3C,IAAI,eAAe,IAAI;oBACrB,oEAAoE;oBACpE,IAAI,OAAO,WAAW,SAAS,KAAK,aAAa;wBAC/C,OAAO;4BAAE,MAAM;4BAAU,aAAa,WAAW,SAAS;wBAAA;oBAC5D;oBACA,6CAA6C;oBAC7C,OAAO;wBACL,MAAM;wBACN,OAAO,CAAA,QAAA,EAAW,YAAW,yCAAA,CAA2C;wBACxE,YAAY;;gBAEhB;gBAEA,6CAA6C;gBAC7C,OAAO;oBACL,MAAM;oBACN,OAAO,CAAA,QAAA,EAAW,YAAW,2CAAA,CAA6C;oBAC1E,YACE,sFACA,0BACA;;YAEN;QACF;QAEA,OAAO;YACL,MAAM;YACN,OAAO;YACP,YACE;;IAEN;IAEO,OAAO,0BAAuB;QACnC,MAAM,MAAM,IAAI,CAAC,iBAAiB;QAClC,IAAI,IAAI,WAAW,EAAE;YACnB,OAAO,IAAI,WAAW;QACxB;QACA,IAAI,eAAe,IAAI,KAAK,IAAI;QAChC,IAAI,IAAI,UAAU,EAAE;YAClB,gBAAgB,CAAA,wBAAA,EAA2B,IAAI,UAAU,CAAA,CAAE;QAC7D;QACA,MAAM,IAAI,MAAM;IAClB;IAEO,OAAO,gBAAgB,GAAiB,EAAE,SAA6B,EAAA;QAC5E,MAAM,KAAK,IAAI,CAAC,uBAAuB;QACvC,OAAO,IAAI,GAAG,KAAK;IACrB;IAEO,OAAO,uBAAoB;QAChC,IAAI;YACF,MAAM,MAAM,IAAI,CAAC,iBAAiB;YAClC,OAAO,IAAI,IAAI,KAAK,YAAY,IAAI,IAAI,KAAK;QAC/C,EAAE,OAAA,IAAM;YACN,OAAO;QACT;IACF;;uCAGa"}},
    {"offset": {"line": 1603, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1608, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/lib/version.ts"],"sourcesContent":["// Generated automatically during releases by scripts/update-version-files.ts\n// This file provides runtime access to the package version for:\n// - HTTP request headers (e.g., X-Client-Info header for API requests)\n// - Debugging and support (identifying which version is running)\n// - Telemetry and logging (version reporting in errors/analytics)\n// - Ensuring build artifacts match the published package version\nexport const version = '2.74.0'\n"],"names":[],"mappings":"AAAA,6EAA6E;AAC7E,gEAAgE;AAChE,uEAAuE;AACvE,iEAAiE;AACjE,kEAAkE;AAClE,iEAAiE;;;;AAC1D,MAAM,UAAU"}},
    {"offset": {"line": 1618, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1623, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/lib/constants.ts"],"sourcesContent":["import { version } from './version'\n\nexport const DEFAULT_VERSION = `realtime-js/${version}`\nexport const VSN: string = '1.0.0'\n\nexport const VERSION = version\n\nexport const DEFAULT_TIMEOUT = 10000\n\nexport const WS_CLOSE_NORMAL = 1000\nexport const MAX_PUSH_BUFFER_SIZE = 100\n\nexport enum SOCKET_STATES {\n  connecting = 0,\n  open = 1,\n  closing = 2,\n  closed = 3,\n}\n\nexport enum CHANNEL_STATES {\n  closed = 'closed',\n  errored = 'errored',\n  joined = 'joined',\n  joining = 'joining',\n  leaving = 'leaving',\n}\n\nexport enum CHANNEL_EVENTS {\n  close = 'phx_close',\n  error = 'phx_error',\n  join = 'phx_join',\n  reply = 'phx_reply',\n  leave = 'phx_leave',\n  access_token = 'access_token',\n}\n\nexport enum TRANSPORTS {\n  websocket = 'websocket',\n}\n\nexport enum CONNECTION_STATE {\n  Connecting = 'connecting',\n  Open = 'open',\n  Closing = 'closing',\n  Closed = 'closed',\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAEO,MAAM,kBAAkB,CAAA,YAAA,EAAe,mLAAA,CAAA,UAAO,CAAA,CAAE;AAChD,MAAM,MAAc;AAEpB,MAAM,UAAU,mLAAA,CAAA,UAAO;AAEvB,MAAM,kBAAkB;AAExB,MAAM,kBAAkB;AACxB,MAAM,uBAAuB;AAEpC,IAAY;AAAZ,CAAA,SAAY,aAAa;IACvB,aAAA,CAAA,aAAA,CAAA,aAAA,GAAA,EAAA,GAAA;IACA,aAAA,CAAA,aAAA,CAAA,OAAA,GAAA,EAAA,GAAA;IACA,aAAA,CAAA,aAAA,CAAA,UAAA,GAAA,EAAA,GAAA;IACA,aAAA,CAAA,aAAA,CAAA,SAAA,GAAA,EAAA,GAAA;AACF,CAAC,EALW,iBAAa,CAAb,gBAAa,CAAA,CAAA;AAOzB,IAAY;AAAZ,CAAA,SAAY,cAAc;IACxB,cAAA,CAAA,SAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;IACA,cAAA,CAAA,SAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;IACA,cAAA,CAAA,UAAA,GAAA;AACF,CAAC,EANW,kBAAc,CAAd,iBAAc,CAAA,CAAA;AAQ1B,IAAY;AAAZ,CAAA,SAAY,cAAc;IACxB,cAAA,CAAA,QAAA,GAAA;IACA,cAAA,CAAA,QAAA,GAAA;IACA,cAAA,CAAA,OAAA,GAAA;IACA,cAAA,CAAA,QAAA,GAAA;IACA,cAAA,CAAA,QAAA,GAAA;IACA,cAAA,CAAA,eAAA,GAAA;AACF,CAAC,EAPW,kBAAc,CAAd,iBAAc,CAAA,CAAA;AAS1B,IAAY;AAAZ,CAAA,SAAY,UAAU;IACpB,UAAA,CAAA,YAAA,GAAA;AACF,CAAC,EAFW,cAAU,CAAV,aAAU,CAAA,CAAA;AAItB,IAAY;AAAZ,CAAA,SAAY,gBAAgB;IAC1B,gBAAA,CAAA,aAAA,GAAA;IACA,gBAAA,CAAA,OAAA,GAAA;IACA,gBAAA,CAAA,UAAA,GAAA;IACA,gBAAA,CAAA,SAAA,GAAA;AACF,CAAC,EALW,oBAAgB,CAAhB,mBAAgB,CAAA,CAAA"}},
    {"offset": {"line": 1680, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1685, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/lib/serializer.ts"],"sourcesContent":["// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\n\nexport default class Serializer {\n  HEADER_LENGTH = 1\n\n  decode(rawPayload: ArrayBuffer | string, callback: Function) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this._binaryDecode(rawPayload))\n    }\n\n    if (typeof rawPayload === 'string') {\n      return callback(JSON.parse(rawPayload))\n    }\n\n    return callback({})\n  }\n\n  private _binaryDecode(buffer: ArrayBuffer) {\n    const view = new DataView(buffer)\n    const decoder = new TextDecoder()\n\n    return this._decodeBroadcast(buffer, view, decoder)\n  }\n\n  private _decodeBroadcast(\n    buffer: ArrayBuffer,\n    view: DataView,\n    decoder: TextDecoder\n  ): {\n    ref: null\n    topic: string\n    event: string\n    payload: { [key: string]: any }\n  } {\n    const topicSize = view.getUint8(1)\n    const eventSize = view.getUint8(2)\n    let offset = this.HEADER_LENGTH + 2\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize))\n    offset = offset + topicSize\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize))\n    offset = offset + eventSize\n    const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)))\n\n    return { ref: null, topic: topic, event: event, payload: data }\n  }\n}\n"],"names":[],"mappings":"AAAA,2HAA2H;AAC3H,8EAA8E;;;;AAEhE,MAAO;IAArB,aAAA;QACE,IAAA,CAAA,aAAa,GAAG;IA0ClB;IAxCE,OAAO,UAAgC,EAAE,QAAkB,EAAA;QACzD,IAAI,WAAW,WAAW,KAAK,aAAa;YAC1C,OAAO,SAAS,IAAI,CAAC,aAAa,CAAC;QACrC;QAEA,IAAI,OAAO,eAAe,UAAU;YAClC,OAAO,SAAS,KAAK,KAAK,CAAC;QAC7B;QAEA,OAAO,SAAS,CAAA;IAClB;IAEQ,cAAc,MAAmB,EAAA;QACvC,MAAM,OAAO,IAAI,SAAS;QAC1B,MAAM,UAAU,IAAI;QAEpB,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,MAAM;IAC7C;IAEQ,iBACN,MAAmB,EACnB,IAAc,EACd,OAAoB,EAAA;QAOpB,MAAM,YAAY,KAAK,QAAQ,CAAC;QAChC,MAAM,YAAY,KAAK,QAAQ,CAAC;QAChC,IAAI,SAAS,IAAI,CAAC,aAAa,GAAG;QAClC,MAAM,QAAQ,QAAQ,MAAM,CAAC,OAAO,KAAK,CAAC,QAAQ,SAAS;QAC3D,SAAS,SAAS;QAClB,MAAM,QAAQ,QAAQ,MAAM,CAAC,OAAO,KAAK,CAAC,QAAQ,SAAS;QAC3D,SAAS,SAAS;QAClB,MAAM,OAAO,KAAK,KAAK,CAAC,QAAQ,MAAM,CAAC,OAAO,KAAK,CAAC,QAAQ,OAAO,UAAU;QAE7E,OAAO;YAAE,KAAK;YAAM,OAAO;YAAO,OAAO;YAAO,SAAS;QAAI;IAC/D"}},
    {"offset": {"line": 1725, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1730, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/lib/timer.ts"],"sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(\n    public callback: Function,\n    public timerCalc: Function\n  ) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n    this.timer = undefined\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(\n      () => {\n        this.tries = this.tries + 1\n        this.callback()\n      },\n      this.timerCalc(this.tries + 1)\n    )\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAYc,MAAO;IAInB,YACS,QAAkB,EAClB,SAAmB,CAAA;QADnB,IAAA,CAAA,QAAQ,GAAR;QACA,IAAA,CAAA,SAAS,GAAT;QALT,IAAA,CAAA,KAAK,GAAuB;QAC5B,IAAA,CAAA,KAAK,GAAW;QAMd,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,SAAS,GAAG;IACnB;IAEA,QAAK;QACH,IAAI,CAAC,KAAK,GAAG;QACb,aAAa,IAAI,CAAC,KAAK;QACvB,IAAI,CAAC,KAAK,GAAG;IACf;IAEA,8DAA8D;IAC9D,kBAAe;QACb,aAAa,IAAI,CAAC,KAAK;QAEvB,IAAI,CAAC,KAAK,GAAQ,WAChB;YACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG;YAC1B,IAAI,CAAC,QAAQ;QACf,GACA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG;IAEhC"}},
    {"offset": {"line": 1767, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1772, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/lib/transformers.ts"],"sourcesContent":["/**\n * Helpers to convert the change Payload into native JS types.\n */\n\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n\nexport enum PostgresTypes {\n  abstime = 'abstime',\n  bool = 'bool',\n  date = 'date',\n  daterange = 'daterange',\n  float4 = 'float4',\n  float8 = 'float8',\n  int2 = 'int2',\n  int4 = 'int4',\n  int4range = 'int4range',\n  int8 = 'int8',\n  int8range = 'int8range',\n  json = 'json',\n  jsonb = 'jsonb',\n  money = 'money',\n  numeric = 'numeric',\n  oid = 'oid',\n  reltime = 'reltime',\n  text = 'text',\n  time = 'time',\n  timestamp = 'timestamp',\n  timestamptz = 'timestamptz',\n  timetz = 'timetz',\n  tsrange = 'tsrange',\n  tstzrange = 'tstzrange',\n}\n\ntype Columns = {\n  name: string // the column name. eg: \"user_id\"\n  type: string // the column type. eg: \"uuid\"\n  flags?: string[] // any special flags for the column. eg: [\"key\"]\n  type_modifier?: number // the type modifier. eg: 4294967295\n}[]\n\ntype BaseValue = null | string | number | boolean\ntype RecordValue = BaseValue | BaseValue[]\n\ntype Record = {\n  [key: string]: RecordValue\n}\n\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (\n  columns: Columns,\n  record: Record | null,\n  options: { skipTypes?: string[] } = {}\n): Record => {\n  const skipTypes = options.skipTypes ?? []\n\n  if (!record) {\n    return {}\n  }\n\n  return Object.keys(record).reduce((acc, rec_key) => {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes)\n    return acc\n  }, {} as Record)\n}\n\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (\n  columnName: string,\n  columns: Columns,\n  record: Record,\n  skipTypes: string[]\n): RecordValue => {\n  const column = columns.find((x) => x.name === columnName)\n  const colType = column?.type\n  const value = record[columnName]\n\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value)\n  }\n\n  return noop(value)\n}\n\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} value The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type: string, value: RecordValue): RecordValue => {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    const dataType = type.slice(1, type.length)\n    return toArray(value, dataType)\n  }\n\n  // If not null, convert to correct type.\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value)\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value)\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value)\n    case PostgresTypes.timestamp:\n      return toTimestampString(value) // Format to be consistent with PostgREST\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value)\n    default:\n      // Return the value for remaining types\n      return noop(value)\n  }\n}\n\nconst noop = (value: RecordValue): RecordValue => {\n  return value\n}\nexport const toBoolean = (value: RecordValue): RecordValue => {\n  switch (value) {\n    case 't':\n      return true\n    case 'f':\n      return false\n    default:\n      return value\n  }\n}\nexport const toNumber = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    const parsedValue = parseFloat(value)\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue\n    }\n  }\n  return value\n}\nexport const toJson = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value)\n    } catch (error) {\n      console.log(`JSON parse error: ${error}`)\n      return value\n    }\n  }\n  return value\n}\n\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value: RecordValue, type: string): RecordValue => {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const lastIdx = value.length - 1\n  const closeBrace = value[lastIdx]\n  const openBrace = value[0]\n\n  // Confirm value is a Postgres array by checking curly brackets\n  if (openBrace === '{' && closeBrace === '}') {\n    let arr\n    const valTrim = value.slice(1, lastIdx)\n\n    // TODO: find a better solution to separate Postgres array data\n    try {\n      arr = JSON.parse('[' + valTrim + ']')\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : []\n    }\n\n    return arr.map((val: BaseValue) => convertCell(type, val))\n  }\n\n  return value\n}\n\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T')\n  }\n\n  return value\n}\n\nexport const httpEndpointURL = (socketUrl: string): string => {\n  let url = socketUrl\n  url = url.replace(/^ws/i, 'http')\n  url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '')\n  return url.replace(/\\/+$/, '') + '/api/broadcast'\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1944, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1949, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/lib/push.ts"],"sourcesContent":["import { DEFAULT_TIMEOUT } from '../lib/constants'\nimport type RealtimeChannel from '../RealtimeChannel'\n\nexport default class Push {\n  sent: boolean = false\n  timeoutTimer: number | undefined = undefined\n  ref: string = ''\n  receivedResp: {\n    status: string\n    response: { [key: string]: any }\n  } | null = null\n  recHooks: {\n    status: string\n    callback: Function\n  }[] = []\n  refEvent: string | null = null\n\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(\n    public channel: RealtimeChannel,\n    public event: string,\n    public payload: { [key: string]: any } = {},\n    public timeout: number = DEFAULT_TIMEOUT\n  ) {}\n\n  resend(timeout: number) {\n    this.timeout = timeout\n    this._cancelRefEvent()\n    this.ref = ''\n    this.refEvent = null\n    this.receivedResp = null\n    this.sent = false\n    this.send()\n  }\n\n  send() {\n    if (this._hasReceived('timeout')) {\n      return\n    }\n    this.startTimeout()\n    this.sent = true\n    this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref,\n      join_ref: this.channel._joinRef(),\n    })\n  }\n\n  updatePayload(payload: { [key: string]: any }): void {\n    this.payload = { ...this.payload, ...payload }\n  }\n\n  receive(status: string, callback: Function) {\n    if (this._hasReceived(status)) {\n      callback(this.receivedResp?.response)\n    }\n\n    this.recHooks.push({ status, callback })\n    return this\n  }\n\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return\n    }\n    this.ref = this.channel.socket._makeRef()\n    this.refEvent = this.channel._replyEventName(this.ref)\n\n    const callback = (payload: any) => {\n      this._cancelRefEvent()\n      this._cancelTimeout()\n      this.receivedResp = payload\n      this._matchReceive(payload)\n    }\n\n    this.channel._on(this.refEvent, {}, callback)\n\n    this.timeoutTimer = <any>setTimeout(() => {\n      this.trigger('timeout', {})\n    }, this.timeout)\n  }\n\n  trigger(status: string, response: any) {\n    if (this.refEvent) this.channel._trigger(this.refEvent, { status, response })\n  }\n\n  destroy() {\n    this._cancelRefEvent()\n    this._cancelTimeout()\n  }\n\n  private _cancelRefEvent() {\n    if (!this.refEvent) {\n      return\n    }\n\n    this.channel._off(this.refEvent, {})\n  }\n\n  private _cancelTimeout() {\n    clearTimeout(this.timeoutTimer)\n    this.timeoutTimer = undefined\n  }\n\n  private _matchReceive({ status, response }: { status: string; response: Function }) {\n    this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response))\n  }\n\n  private _hasReceived(status: string) {\n    return this.receivedResp && this.receivedResp.status === status\n  }\n}\n"],"names":[],"mappings":";;;;;;AAGc,MAAO;IAcnB;;;;;;;QAQA,YACS,OAAwB,EACxB,KAAa,EACb,UAAkC,CAAA,CAAE,EACpC,UAAkB,qLAAA,CAAA,kBAAe,CAAA;QAHjC,IAAA,CAAA,OAAO,GAAP;QACA,IAAA,CAAA,KAAK,GAAL;QACA,IAAA,CAAA,OAAO,GAAP;QACA,IAAA,CAAA,OAAO,GAAP;QAzBT,IAAA,CAAA,IAAI,GAAY;QAChB,IAAA,CAAA,YAAY,GAAuB;QACnC,IAAA,CAAA,GAAG,GAAW;QACd,IAAA,CAAA,YAAY,GAGD;QACX,IAAA,CAAA,QAAQ,GAGF,EAAE;QACR,IAAA,CAAA,QAAQ,GAAkB;IAevB;IAEH,OAAO,OAAe,EAAA;QACpB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,IAAI;IACX;IAEA,OAAI;QACF,IAAI,IAAI,CAAC,YAAY,CAAC,YAAY;YAChC;QACF;QACA,IAAI,CAAC,YAAY;QACjB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;YACvB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK;YACzB,OAAO,IAAI,CAAC,KAAK;YACjB,SAAS,IAAI,CAAC,OAAO;YACrB,KAAK,IAAI,CAAC,GAAG;YACb,UAAU,IAAI,CAAC,OAAO,CAAC,QAAQ;;IAEnC;IAEA,cAAc,OAA+B,EAAA;QAC3C,IAAI,CAAC,OAAO,GAAA,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GAAQ,IAAI,CAAC,OAAO,GAAK;IACvC;IAEA,QAAQ,MAAc,EAAE,QAAkB,EAAA;;QACxC,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS;YAC7B,SAAS,CAAA,KAAA,IAAI,CAAC,YAAY,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,QAAQ;QACtC;QAEA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YAAE;YAAQ;QAAQ;QACrC,OAAO,IAAI;IACb;IAEA,eAAY;QACV,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB;QACF;QACA,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ;QACvC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG;QAErD,MAAM,WAAW,CAAC;YAChB,IAAI,CAAC,eAAe;YACpB,IAAI,CAAC,cAAc;YACnB,IAAI,CAAC,YAAY,GAAG;YACpB,IAAI,CAAC,aAAa,CAAC;QACrB;QAEA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAA,GAAI;QAEpC,IAAI,CAAC,YAAY,GAAQ,WAAW;YAClC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAA;QAC1B,GAAG,IAAI,CAAC,OAAO;IACjB;IAEA,QAAQ,MAAc,EAAE,QAAa,EAAA;QACnC,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE;YAAE;YAAQ;QAAQ;IAC5E;IAEA,UAAO;QACL,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,cAAc;IACrB;IAEQ,kBAAe;QACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB;QACF;QAEA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAA;IACnC;IAEQ,iBAAc;QACpB,aAAa,IAAI,CAAC,YAAY;QAC9B,IAAI,CAAC,YAAY,GAAG;IACtB;IAEQ,cAAc,EAAE,MAAM,EAAE,QAAQ,EAA0C,EAAA;QAChF,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK,QAAQ,OAAO,CAAC,CAAC,IAAM,EAAE,QAAQ,CAAC;IAC7E;IAEQ,aAAa,MAAc,EAAA;QACjC,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK;IAC3D"}},
    {"offset": {"line": 2056, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2061, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/RealtimePresence.ts"],"sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\n\nimport type { PresenceOpts, PresenceOnJoinCallback, PresenceOnLeaveCallback } from 'phoenix'\nimport type RealtimeChannel from './RealtimeChannel'\n\ntype Presence<T extends { [key: string]: any } = {}> = {\n  presence_ref: string\n} & T\n\nexport type RealtimePresenceState<T extends { [key: string]: any } = {}> = {\n  [key: string]: Presence<T>[]\n}\n\nexport type RealtimePresenceJoinPayload<T extends { [key: string]: any }> = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}`\n  key: string\n  currentPresences: Presence<T>[]\n  newPresences: Presence<T>[]\n}\n\nexport type RealtimePresenceLeavePayload<T extends { [key: string]: any }> = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}`\n  key: string\n  currentPresences: Presence<T>[]\n  leftPresences: Presence<T>[]\n}\n\nexport enum REALTIME_PRESENCE_LISTEN_EVENTS {\n  SYNC = 'sync',\n  JOIN = 'join',\n  LEAVE = 'leave',\n}\n\ntype PresenceDiff = {\n  joins: RealtimePresenceState\n  leaves: RealtimePresenceState\n}\n\ntype RawPresenceState = {\n  [key: string]: {\n    metas: {\n      phx_ref?: string\n      phx_ref_prev?: string\n      [key: string]: any\n    }[]\n  }\n}\n\ntype RawPresenceDiff = {\n  joins: RawPresenceState\n  leaves: RawPresenceState\n}\n\ntype PresenceChooser<T> = (key: string, presences: Presence[]) => T\n\nexport default class RealtimePresence {\n  state: RealtimePresenceState = {}\n  pendingDiffs: RawPresenceDiff[] = []\n  joinRef: string | null = null\n  enabled: boolean = false\n  caller: {\n    onJoin: PresenceOnJoinCallback\n    onLeave: PresenceOnLeaveCallback\n    onSync: () => void\n  } = {\n    onJoin: () => {},\n    onLeave: () => {},\n    onSync: () => {},\n  }\n\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(\n    public channel: RealtimeChannel,\n    opts?: PresenceOpts\n  ) {\n    const events = opts?.events || {\n      state: 'presence_state',\n      diff: 'presence_diff',\n    }\n\n    this.channel._on(events.state, {}, (newState: RawPresenceState) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      this.joinRef = this.channel._joinRef()\n\n      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave)\n\n      this.pendingDiffs.forEach((diff) => {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave)\n      })\n\n      this.pendingDiffs = []\n\n      onSync()\n    })\n\n    this.channel._on(events.diff, {}, (diff: RawPresenceDiff) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff)\n      } else {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave)\n\n        onSync()\n      }\n    })\n\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences,\n      })\n    })\n\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences,\n      })\n    })\n\n    this.onSync(() => {\n      this.channel._trigger('presence', { event: 'sync' })\n    })\n  }\n\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  private static syncState(\n    currentState: RealtimePresenceState,\n    newState: RawPresenceState | RealtimePresenceState,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const state = this.cloneDeep(currentState)\n    const transformedState = this.transformState(newState)\n    const joins: RealtimePresenceState = {}\n    const leaves: RealtimePresenceState = {}\n\n    this.map(state, (key: string, presences: Presence[]) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences\n      }\n    })\n\n    this.map(transformedState, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map((m: Presence) => m.presence_ref)\n        const curPresenceRefs = currentPresences.map((m: Presence) => m.presence_ref)\n        const joinedPresences: Presence[] = newPresences.filter(\n          (m: Presence) => curPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n        const leftPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => newPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences\n        }\n      } else {\n        joins[key] = newPresences\n      }\n    })\n\n    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave)\n  }\n\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n  private static syncDiff(\n    state: RealtimePresenceState,\n    diff: RawPresenceDiff | PresenceDiff,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const { joins, leaves } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves),\n    }\n\n    if (!onJoin) {\n      onJoin = () => {}\n    }\n\n    if (!onLeave) {\n      onLeave = () => {}\n    }\n\n    this.map(joins, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key] ?? []\n      state[key] = this.cloneDeep(newPresences)\n\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map((m: Presence) => m.presence_ref)\n        const curPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => joinedPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        state[key].unshift(...curPresences)\n      }\n\n      onJoin(key, currentPresences, newPresences)\n    })\n\n    this.map(leaves, (key, leftPresences: Presence[]) => {\n      let currentPresences: Presence[] = state[key]\n\n      if (!currentPresences) return\n\n      const presenceRefsToRemove = leftPresences.map((m: Presence) => m.presence_ref)\n      currentPresences = currentPresences.filter(\n        (m: Presence) => presenceRefsToRemove.indexOf(m.presence_ref) < 0\n      )\n\n      state[key] = currentPresences\n\n      onLeave(key, currentPresences, leftPresences)\n\n      if (currentPresences.length === 0) delete state[key]\n    })\n\n    return state\n  }\n\n  /** @internal */\n  private static map<T = any>(obj: RealtimePresenceState, func: PresenceChooser<T>): T[] {\n    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]))\n  }\n\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n  private static transformState(\n    state: RawPresenceState | RealtimePresenceState\n  ): RealtimePresenceState {\n    state = this.cloneDeep(state)\n\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key]\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map((presence) => {\n          presence['presence_ref'] = presence['phx_ref']\n\n          delete presence['phx_ref']\n          delete presence['phx_ref_prev']\n\n          return presence\n        }) as Presence[]\n      } else {\n        newState[key] = presences\n      }\n\n      return newState\n    }, {} as RealtimePresenceState)\n  }\n\n  /** @internal */\n  private static cloneDeep(obj: { [key: string]: any }) {\n    return JSON.parse(JSON.stringify(obj))\n  }\n\n  /** @internal */\n  private onJoin(callback: PresenceOnJoinCallback): void {\n    this.caller.onJoin = callback\n  }\n\n  /** @internal */\n  private onLeave(callback: PresenceOnLeaveCallback): void {\n    this.caller.onLeave = callback\n  }\n\n  /** @internal */\n  private onSync(callback: () => void): void {\n    this.caller.onSync = callback\n  }\n\n  /** @internal */\n  private inPendingSyncState(): boolean {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef()\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;AA8BA,IAAY;AAAZ,CAAA,SAAY,+BAA+B;IACzC,+BAAA,CAAA,OAAA,GAAA;IACA,+BAAA,CAAA,OAAA,GAAA;IACA,+BAAA,CAAA,QAAA,GAAA;AACF,CAAC,EAJW,mCAA+B,CAA/B,kCAA+B,CAAA,CAAA;AA4B7B,MAAO;IAenB;;;;;;QAOA,YACS,OAAwB,EAC/B,IAAmB,CAAA;QADZ,IAAA,CAAA,OAAO,GAAP;QAtBT,IAAA,CAAA,KAAK,GAA0B,CAAA;QAC/B,IAAA,CAAA,YAAY,GAAsB,EAAE;QACpC,IAAA,CAAA,OAAO,GAAkB;QACzB,IAAA,CAAA,OAAO,GAAY;QACnB,IAAA,CAAA,MAAM,GAIF;YACF,QAAQ,KAAO;YACf,SAAS,KAAO;YAChB,QAAQ,KAAO;;QAcf,MAAM,SAAS,CAAA,SAAI,QAAJ,SAAI,KAAA,IAAA,KAAA,IAAJ,KAAM,MAAM,KAAI;YAC7B,OAAO;YACP,MAAM;;QAGR,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,EAAE,CAAA,GAAI,CAAC;YAClC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM;YAE/C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ;YAEpC,IAAI,CAAC,KAAK,GAAG,iBAAiB,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,QAAQ;YAEtE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBACzB,IAAI,CAAC,KAAK,GAAG,iBAAiB,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,QAAQ;YACnE;YAEA,IAAI,CAAC,YAAY,GAAG,EAAE;YAEtB;QACF;QAEA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,CAAA,GAAI,CAAC;YACjC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM;YAE/C,IAAI,IAAI,CAAC,kBAAkB,IAAI;gBAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YACzB,OAAO;gBACL,IAAI,CAAC,KAAK,GAAG,iBAAiB,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,QAAQ;gBAEjE;YACF;QACF;QAEA,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,kBAAkB;YAClC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY;gBAChC,OAAO;gBACP;gBACA;gBACA;;QAEJ;QAEA,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,kBAAkB;YACnC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY;gBAChC,OAAO;gBACP;gBACA;gBACA;;QAEJ;QAEA,IAAI,CAAC,MAAM,CAAC;YACV,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY;gBAAE,OAAO;YAAM;QACnD;IACF;IAEA;;;;;;;;;QAUQ,OAAO,UACb,YAAmC,EACnC,QAAkD,EAClD,MAA8B,EAC9B,OAAgC,EAAA;QAEhC,MAAM,QAAQ,IAAI,CAAC,SAAS,CAAC;QAC7B,MAAM,mBAAmB,IAAI,CAAC,cAAc,CAAC;QAC7C,MAAM,QAA+B,CAAA;QACrC,MAAM,SAAgC,CAAA;QAEtC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAa;YAC5B,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE;gBAC1B,MAAM,CAAC,IAAI,GAAG;YAChB;QACF;QAEA,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,KAAK;YAC/B,MAAM,mBAA+B,KAAK,CAAC,IAAI;YAE/C,IAAI,kBAAkB;gBACpB,MAAM,kBAAkB,aAAa,GAAG,CAAC,CAAC,IAAgB,EAAE,YAAY;gBACxE,MAAM,kBAAkB,iBAAiB,GAAG,CAAC,CAAC,IAAgB,EAAE,YAAY;gBAC5E,MAAM,kBAA8B,aAAa,MAAM,CACrD,CAAC,IAAgB,gBAAgB,OAAO,CAAC,EAAE,YAAY,IAAI;gBAE7D,MAAM,gBAA4B,iBAAiB,MAAM,CACvD,CAAC,IAAgB,gBAAgB,OAAO,CAAC,EAAE,YAAY,IAAI;gBAG7D,IAAI,gBAAgB,MAAM,GAAG,GAAG;oBAC9B,KAAK,CAAC,IAAI,GAAG;gBACf;gBAEA,IAAI,cAAc,MAAM,GAAG,GAAG;oBAC5B,MAAM,CAAC,IAAI,GAAG;gBAChB;YACF,OAAO;gBACL,KAAK,CAAC,IAAI,GAAG;YACf;QACF;QAEA,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO;YAAE;YAAO;QAAM,GAAI,QAAQ;IACzD;IAEA;;;;;;;;;QAUQ,OAAO,SACb,KAA4B,EAC5B,IAAoC,EACpC,MAA8B,EAC9B,OAAgC,EAAA;QAEhC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG;YACxB,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,KAAK;YACrC,QAAQ,IAAI,CAAC,cAAc,CAAC,KAAK,MAAM;;QAGzC,IAAI,CAAC,QAAQ;YACX,SAAS,KAAO;QAClB;QAEA,IAAI,CAAC,SAAS;YACZ,UAAU,KAAO;QACnB;QAEA,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK;;YACpB,MAAM,mBAA+B,CAAA,KAAA,KAAK,CAAC,IAAI,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI,EAAE;YACrD,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YAE5B,IAAI,iBAAiB,MAAM,GAAG,GAAG;gBAC/B,MAAM,qBAAqB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAgB,EAAE,YAAY;gBACzE,MAAM,eAA2B,iBAAiB,MAAM,CACtD,CAAC,IAAgB,mBAAmB,OAAO,CAAC,EAAE,YAAY,IAAI;gBAGhE,KAAK,CAAC,IAAI,CAAC,OAAO,IAAI;YACxB;YAEA,OAAO,KAAK,kBAAkB;QAChC;QAEA,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK;YACrB,IAAI,mBAA+B,KAAK,CAAC,IAAI;YAE7C,IAAI,CAAC,kBAAkB;YAEvB,MAAM,uBAAuB,cAAc,GAAG,CAAC,CAAC,IAAgB,EAAE,YAAY;YAC9E,mBAAmB,iBAAiB,MAAM,CACxC,CAAC,IAAgB,qBAAqB,OAAO,CAAC,EAAE,YAAY,IAAI;YAGlE,KAAK,CAAC,IAAI,GAAG;YAEb,QAAQ,KAAK,kBAAkB;YAE/B,IAAI,iBAAiB,MAAM,KAAK,GAAG,OAAO,KAAK,CAAC,IAAI;QACtD;QAEA,OAAO;IACT;IAEA,cAAA,GACQ,OAAO,IAAa,GAA0B,EAAE,IAAwB,EAAA;QAC9E,OAAO,OAAO,mBAAmB,CAAC,KAAK,GAAG,CAAC,CAAC,MAAQ,KAAK,KAAK,GAAG,CAAC,IAAI;IACxE;IAEA;;;;;;;;;;;;;;;;;;;;;;QAuBQ,OAAO,eACb,KAA+C,EAAA;QAE/C,QAAQ,IAAI,CAAC,SAAS,CAAC;QAEvB,OAAO,OAAO,mBAAmB,CAAC,OAAO,MAAM,CAAC,CAAC,UAAU;YACzD,MAAM,YAAY,KAAK,CAAC,IAAI;YAE5B,IAAI,WAAW,WAAW;gBACxB,QAAQ,CAAC,IAAI,GAAG,UAAU,KAAK,CAAC,GAAG,CAAC,CAAC;oBACnC,QAAQ,CAAC,eAAe,GAAG,QAAQ,CAAC,UAAU;oBAE9C,OAAO,QAAQ,CAAC,UAAU;oBAC1B,OAAO,QAAQ,CAAC,eAAe;oBAE/B,OAAO;gBACT;YACF,OAAO;gBACL,QAAQ,CAAC,IAAI,GAAG;YAClB;YAEA,OAAO;QACT,GAAG,CAAA;IACL;IAEA,cAAA,GACQ,OAAO,UAAU,GAA2B,EAAA;QAClD,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC;IACnC;IAEA,cAAA,GACQ,OAAO,QAAgC,EAAA;QAC7C,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;IACvB;IAEA,cAAA,GACQ,QAAQ,QAAiC,EAAA;QAC/C,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG;IACxB;IAEA,cAAA,GACQ,OAAO,QAAoB,EAAA;QACjC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;IACvB;IAEA,cAAA,GACQ,qBAAkB;QACxB,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ;IAChE"}},
    {"offset": {"line": 2278, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2283, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/RealtimeChannel.ts"],"sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES, MAX_PUSH_BUFFER_SIZE } from './lib/constants'\nimport Push from './lib/push'\nimport type RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\nimport RealtimePresence, { REALTIME_PRESENCE_LISTEN_EVENTS } from './RealtimePresence'\nimport type {\n  RealtimePresenceJoinPayload,\n  RealtimePresenceLeavePayload,\n  RealtimePresenceState,\n} from './RealtimePresence'\nimport * as Transformers from './lib/transformers'\nimport { httpEndpointURL } from './lib/transformers'\n\ntype ReplayOption = {\n  since: number\n  limit?: number\n}\n\nexport type RealtimeChannelOptions = {\n  config: {\n    /**\n     * self option enables client to receive message it broadcast\n     * ack option instructs server to acknowledge that broadcast message was received\n     * replay option instructs server to replay broadcast messages\n     */\n    broadcast?: { self?: boolean; ack?: boolean; replay?: ReplayOption }\n    /**\n     * key option is used to track presence payload across clients\n     */\n    presence?: { key?: string; enabled?: boolean }\n    /**\n     * defines if the channel is private or not and if RLS policies will be used to check data\n     */\n    private?: boolean\n  }\n}\n\ntype RealtimePostgresChangesPayloadBase = {\n  schema: string\n  table: string\n  commit_timestamp: string\n  errors: string[]\n}\n\nexport type RealtimePostgresInsertPayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`\n    new: T\n    old: {}\n  }\n\nexport type RealtimePostgresUpdatePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`\n    new: T\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresDeletePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`\n    new: {}\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresChangesPayload<T extends { [key: string]: any }> =\n  | RealtimePostgresInsertPayload<T>\n  | RealtimePostgresUpdatePayload<T>\n  | RealtimePostgresDeletePayload<T>\n\nexport type RealtimePostgresChangesFilter<T extends `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT}`> = {\n  /**\n   * The type of database change to listen to.\n   */\n  event: T\n  /**\n   * The database schema to listen to.\n   */\n  schema: string\n  /**\n   * The database table to listen to.\n   */\n  table?: string\n  /**\n   * Receive database changes when filter is matched.\n   */\n  filter?: string\n}\n\nexport type RealtimeChannelSendResponse = 'ok' | 'timed out' | 'error'\n\nexport enum REALTIME_POSTGRES_CHANGES_LISTEN_EVENT {\n  ALL = '*',\n  INSERT = 'INSERT',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n}\n\nexport enum REALTIME_LISTEN_TYPES {\n  BROADCAST = 'broadcast',\n  PRESENCE = 'presence',\n  POSTGRES_CHANGES = 'postgres_changes',\n  SYSTEM = 'system',\n}\n\nexport enum REALTIME_SUBSCRIBE_STATES {\n  SUBSCRIBED = 'SUBSCRIBED',\n  TIMED_OUT = 'TIMED_OUT',\n  CLOSED = 'CLOSED',\n  CHANNEL_ERROR = 'CHANNEL_ERROR',\n}\n\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES\n\ninterface PostgresChangesFilters {\n  postgres_changes: {\n    id: string\n    event: string\n    schema?: string\n    table?: string\n    filter?: string\n  }[]\n}\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n */\nexport default class RealtimeChannel {\n  bindings: {\n    [key: string]: {\n      type: string\n      filter: { [key: string]: any }\n      callback: Function\n      id?: string\n    }[]\n  } = {}\n  timeout: number\n  state: CHANNEL_STATES = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n  presence: RealtimePresence\n  broadcastEndpointURL: string\n  subTopic: string\n  private: boolean\n\n  constructor(\n    /** Topic name can be any string. */\n    public topic: string,\n    public params: RealtimeChannelOptions = { config: {} },\n    public socket: RealtimeClient\n  ) {\n    this.subTopic = topic.replace(/^realtime:/i, '')\n    this.params.config = {\n      ...{\n        broadcast: { ack: false, self: false },\n        presence: { key: '', enabled: false },\n        private: false,\n      },\n      ...params.config,\n    }\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout)\n    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs)\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this._onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket._remove(this)\n    })\n    this._onError((reason: string) => {\n      if (this._isLeaving() || this._isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n\n    this.joinPush.receive('error', (reason: any) => {\n      if (this._isLeaving() || this._isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this._on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\n      this._trigger(this._replyEventName(ref), payload)\n    })\n\n    this.presence = new RealtimePresence(this)\n\n    this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint)\n    this.private = this.params.config.private || false\n\n    if (!this.private && this.params.config?.broadcast?.replay) {\n      throw `tried to use replay on public channel '${this.topic}'. It must be a private channel.`\n    }\n  }\n\n  /** Subscribe registers your client with the server */\n  subscribe(\n    callback?: (status: REALTIME_SUBSCRIBE_STATES, err?: Error) => void,\n    timeout = this.timeout\n  ): RealtimeChannel {\n    if (!this.socket.isConnected()) {\n      this.socket.connect()\n    }\n    if (this.state == CHANNEL_STATES.closed) {\n      const {\n        config: { broadcast, presence, private: isPrivate },\n      } = this.params\n\n      const postgres_changes = this.bindings.postgres_changes?.map((r) => r.filter) ?? []\n\n      const presence_enabled =\n        (!!this.bindings[REALTIME_LISTEN_TYPES.PRESENCE] &&\n          this.bindings[REALTIME_LISTEN_TYPES.PRESENCE].length > 0) ||\n        this.params.config.presence?.enabled === true\n      const accessTokenPayload: { access_token?: string } = {}\n      const config = {\n        broadcast,\n        presence: { ...presence, enabled: presence_enabled },\n        postgres_changes,\n        private: isPrivate,\n      }\n\n      if (this.socket.accessTokenValue) {\n        accessTokenPayload.access_token = this.socket.accessTokenValue\n      }\n\n      this._onError((e: Error) => callback?.(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e))\n\n      this._onClose(() => callback?.(REALTIME_SUBSCRIBE_STATES.CLOSED))\n\n      this.updateJoinPayload({ ...{ config }, ...accessTokenPayload })\n\n      this.joinedOnce = true\n      this._rejoin(timeout)\n\n      this.joinPush\n        .receive('ok', async ({ postgres_changes }: PostgresChangesFilters) => {\n          this.socket.setAuth()\n          if (postgres_changes === undefined) {\n            callback?.(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED)\n            return\n          } else {\n            const clientPostgresBindings = this.bindings.postgres_changes\n            const bindingsLen = clientPostgresBindings?.length ?? 0\n            const newPostgresBindings = []\n\n            for (let i = 0; i < bindingsLen; i++) {\n              const clientPostgresBinding = clientPostgresBindings[i]\n              const {\n                filter: { event, schema, table, filter },\n              } = clientPostgresBinding\n              const serverPostgresFilter = postgres_changes && postgres_changes[i]\n\n              if (\n                serverPostgresFilter &&\n                serverPostgresFilter.event === event &&\n                serverPostgresFilter.schema === schema &&\n                serverPostgresFilter.table === table &&\n                serverPostgresFilter.filter === filter\n              ) {\n                newPostgresBindings.push({\n                  ...clientPostgresBinding,\n                  id: serverPostgresFilter.id,\n                })\n              } else {\n                this.unsubscribe()\n                this.state = CHANNEL_STATES.errored\n\n                callback?.(\n                  REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR,\n                  new Error('mismatch between server and client bindings for postgres changes')\n                )\n                return\n              }\n            }\n\n            this.bindings.postgres_changes = newPostgresBindings\n\n            callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED)\n            return\n          }\n        })\n        .receive('error', (error: { [key: string]: any }) => {\n          this.state = CHANNEL_STATES.errored\n          callback?.(\n            REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR,\n            new Error(JSON.stringify(Object.values(error).join(', ') || 'error'))\n          )\n          return\n        })\n        .receive('timeout', () => {\n          callback?.(REALTIME_SUBSCRIBE_STATES.TIMED_OUT)\n          return\n        })\n    }\n    return this\n  }\n\n  presenceState<T extends { [key: string]: any } = {}>(): RealtimePresenceState<T> {\n    return this.presence.state as RealtimePresenceState<T>\n  }\n\n  async track(\n    payload: { [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'track',\n        payload,\n      },\n      opts.timeout || this.timeout\n    )\n  }\n\n  async untrack(opts: { [key: string]: any } = {}): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'untrack',\n      },\n      opts\n    )\n  }\n\n  /**\n   * Creates an event handler that listens to changes.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.SYNC}` },\n    callback: () => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}` },\n    callback: (payload: RealtimePresenceJoinPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}` },\n    callback: (payload: RealtimePresenceLeavePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL}`>,\n    callback: (payload: RealtimePostgresChangesPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`>,\n    callback: (payload: RealtimePostgresInsertPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`>,\n    callback: (payload: RealtimePostgresUpdatePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`>,\n    callback: (payload: RealtimePostgresDeletePayload<T>) => void\n  ): RealtimeChannel\n  /**\n   * The following is placed here to display on supabase.com/docs/reference/javascript/subscribe.\n   * @param type One of \"broadcast\", \"presence\", or \"postgres_changes\".\n   * @param filter Custom object specific to the Realtime feature detailing which payloads to receive.\n   * @param callback Function to be invoked when event handler is triggered.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\n    filter: { event: string },\n    callback: (payload: {\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\n      event: string\n      meta?: {\n        replayed?: boolean\n        id: string\n      }\n      [key: string]: any\n    }) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\n    filter: { event: string },\n    callback: (payload: {\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\n      event: string\n      meta?: {\n        replayed?: boolean\n        id: string\n      }\n      payload: T\n    }) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.SYSTEM}`,\n    filter: {},\n    callback: (payload: any) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES}`,\n    filter: { event: string; [key: string]: string },\n    callback: (payload: any) => void\n  ): RealtimeChannel {\n    if (this.state === CHANNEL_STATES.joined && type === REALTIME_LISTEN_TYPES.PRESENCE) {\n      this.socket.log(\n        'channel',\n        `resubscribe to ${this.topic} due to change in presence callbacks on joined channel`\n      )\n      this.unsubscribe().then(() => this.subscribe())\n    }\n    return this._on(type, filter, callback)\n  }\n  /**\n   * Sends a message into the channel.\n   *\n   * @param args Arguments to send to channel\n   * @param args.type The type of event to send\n   * @param args.event The name of the event being sent\n   * @param args.payload Payload to be sent\n   * @param opts Options to be used during the send process\n   */\n  async send(\n    args: {\n      type: 'broadcast' | 'presence' | 'postgres_changes'\n      event: string\n      payload?: any\n      [key: string]: any\n    },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    if (!this._canPush() && args.type === 'broadcast') {\n      const { event, payload: endpoint_payload } = args\n      const authorization = this.socket.accessTokenValue\n        ? `Bearer ${this.socket.accessTokenValue}`\n        : ''\n      const options = {\n        method: 'POST',\n        headers: {\n          Authorization: authorization,\n          apikey: this.socket.apiKey ? this.socket.apiKey : '',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          messages: [\n            {\n              topic: this.subTopic,\n              event,\n              payload: endpoint_payload,\n              private: this.private,\n            },\n          ],\n        }),\n      }\n\n      try {\n        const response = await this._fetchWithTimeout(\n          this.broadcastEndpointURL,\n          options,\n          opts.timeout ?? this.timeout\n        )\n\n        await response.body?.cancel()\n        return response.ok ? 'ok' : 'error'\n      } catch (error: any) {\n        if (error.name === 'AbortError') {\n          return 'timed out'\n        } else {\n          return 'error'\n        }\n      }\n    } else {\n      return new Promise((resolve) => {\n        const push = this._push(args.type, args, opts.timeout || this.timeout)\n\n        if (args.type === 'broadcast' && !this.params?.config?.broadcast?.ack) {\n          resolve('ok')\n        }\n\n        push.receive('ok', () => resolve('ok'))\n        push.receive('error', () => resolve('error'))\n        push.receive('timeout', () => resolve('timed out'))\n      })\n    }\n  }\n\n  updateJoinPayload(payload: { [key: string]: any }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout): Promise<'ok' | 'timed out' | 'error'> {\n    this.state = CHANNEL_STATES.leaving\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef())\n    }\n\n    this.joinPush.destroy()\n\n    let leavePush: Push | null = null\n\n    return new Promise<RealtimeChannelSendResponse>((resolve) => {\n      leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n      leavePush\n        .receive('ok', () => {\n          onClose()\n          resolve('ok')\n        })\n        .receive('timeout', () => {\n          onClose()\n          resolve('timed out')\n        })\n        .receive('error', () => {\n          resolve('error')\n        })\n\n      leavePush.send()\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {})\n      }\n    }).finally(() => {\n      leavePush?.destroy()\n    })\n  }\n  /**\n   * Teardown the channel.\n   *\n   * Destroys and stops related timers.\n   */\n  teardown() {\n    this.pushBuffer.forEach((push: Push) => push.destroy())\n    this.pushBuffer = []\n    this.rejoinTimer.reset()\n    this.joinPush.destroy()\n    this.state = CHANNEL_STATES.closed\n    this.bindings = {}\n  }\n\n  /** @internal */\n\n  async _fetchWithTimeout(url: string, options: { [key: string]: any }, timeout: number) {\n    const controller = new AbortController()\n    const id = setTimeout(() => controller.abort(), timeout)\n\n    const response = await this.socket.fetch(url, {\n      ...options,\n      signal: controller.signal,\n    })\n\n    clearTimeout(id)\n\n    return response\n  }\n\n  /** @internal */\n  _push(event: string, payload: { [key: string]: any }, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this._canPush()) {\n      pushEvent.send()\n    } else {\n      this._addToPushBuffer(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  /** @internal */\n  _addToPushBuffer(pushEvent: Push) {\n    pushEvent.startTimeout()\n    this.pushBuffer.push(pushEvent)\n\n    // Enforce buffer size limit\n    if (this.pushBuffer.length > MAX_PUSH_BUFFER_SIZE) {\n      const removedPush = this.pushBuffer.shift()\n      if (removedPush) {\n        removedPush.destroy()\n        this.socket.log(\n          'channel',\n          `discarded push due to buffer overflow: ${removedPush.event}`,\n          removedPush.payload\n        )\n      }\n    }\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event: string, payload: any, _ref?: string) {\n    return payload\n  }\n\n  /** @internal */\n  _isMember(topic: string): boolean {\n    return this.topic === topic\n  }\n\n  /** @internal */\n  _joinRef(): string {\n    return this.joinPush.ref\n  }\n\n  /** @internal */\n  _trigger(type: string, payload?: any, ref?: string) {\n    const typeLower = type.toLocaleLowerCase()\n    const { close, error, leave, join } = CHANNEL_EVENTS\n    const events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      this.bindings.postgres_changes\n        ?.filter((bind) => {\n          return bind.filter?.event === '*' || bind.filter?.event?.toLocaleLowerCase() === typeLower\n        })\n        .map((bind) => bind.callback(handledPayload, ref))\n    } else {\n      this.bindings[typeLower]\n        ?.filter((bind) => {\n          if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n            if ('id' in bind) {\n              const bindId = bind.id\n              const bindEvent = bind.filter?.event\n              return (\n                bindId &&\n                payload.ids?.includes(bindId) &&\n                (bindEvent === '*' ||\n                  bindEvent?.toLocaleLowerCase() === payload.data?.type.toLocaleLowerCase())\n              )\n            } else {\n              const bindEvent = bind?.filter?.event?.toLocaleLowerCase()\n              return bindEvent === '*' || bindEvent === payload?.event?.toLocaleLowerCase()\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower\n          }\n        })\n        .map((bind) => {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            const postgresChanges = handledPayload.data\n            const { schema, table, commit_timestamp, type, errors } = postgresChanges\n            const enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: type,\n              new: {},\n              old: {},\n              errors: errors,\n            }\n            handledPayload = {\n              ...enrichedPayload,\n              ...this._getPayloadRecords(postgresChanges),\n            }\n          }\n          bind.callback(handledPayload, ref)\n        })\n    }\n  }\n\n  /** @internal */\n  _isClosed(): boolean {\n    return this.state === CHANNEL_STATES.closed\n  }\n\n  /** @internal */\n  _isJoined(): boolean {\n    return this.state === CHANNEL_STATES.joined\n  }\n\n  /** @internal */\n  _isJoining(): boolean {\n    return this.state === CHANNEL_STATES.joining\n  }\n\n  /** @internal */\n  _isLeaving(): boolean {\n    return this.state === CHANNEL_STATES.leaving\n  }\n\n  /** @internal */\n  _replyEventName(ref: string): string {\n    return `chan_reply_${ref}`\n  }\n\n  /** @internal */\n  _on(type: string, filter: { [key: string]: any }, callback: Function) {\n    const typeLower = type.toLocaleLowerCase()\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback,\n    }\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding)\n    } else {\n      this.bindings[typeLower] = [binding]\n    }\n\n    return this\n  }\n\n  /** @internal */\n  _off(type: string, filter: { [key: string]: any }) {\n    const typeLower = type.toLocaleLowerCase()\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n        return !(\n          bind.type?.toLocaleLowerCase() === typeLower &&\n          RealtimeChannel.isEqual(bind.filter, filter)\n        )\n      })\n    }\n    return this\n  }\n\n  /** @internal */\n  private static isEqual(obj1: { [key: string]: string }, obj2: { [key: string]: string }) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /** @internal */\n  private _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this._rejoin()\n    }\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  private _onClose(callback: Function) {\n    this._on(CHANNEL_EVENTS.close, {}, callback)\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  private _onError(callback: Function) {\n    this._on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\n  }\n\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  private _canPush(): boolean {\n    return this.socket.isConnected() && this._isJoined()\n  }\n\n  /** @internal */\n  private _rejoin(timeout = this.timeout): void {\n    if (this._isLeaving()) {\n      return\n    }\n    this.socket._leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  /** @internal */\n  private _getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record)\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record)\n    }\n\n    return records\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2807, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2812, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/RealtimeClient.ts"],"sourcesContent":["import WebSocketFactory, { WebSocketLike } from './lib/websocket-factory'\n\nimport {\n  CHANNEL_EVENTS,\n  CONNECTION_STATE,\n  DEFAULT_VERSION,\n  DEFAULT_TIMEOUT,\n  SOCKET_STATES,\n  TRANSPORTS,\n  VSN,\n  WS_CLOSE_NORMAL,\n} from './lib/constants'\n\nimport Serializer from './lib/serializer'\nimport Timer from './lib/timer'\n\nimport { httpEndpointURL } from './lib/transformers'\nimport RealtimeChannel from './RealtimeChannel'\nimport type { RealtimeChannelOptions } from './RealtimeChannel'\n\ntype Fetch = typeof fetch\n\nexport type Channel = {\n  name: string\n  inserted_at: string\n  updated_at: string\n  id: number\n}\nexport type LogLevel = 'info' | 'warn' | 'error'\n\nexport type RealtimeMessage = {\n  topic: string\n  event: string\n  payload: any\n  ref: string\n  join_ref?: string\n}\n\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\nexport type HeartbeatStatus = 'sent' | 'ok' | 'error' | 'timeout' | 'disconnected'\n\nconst noop = () => {}\n\ntype RealtimeClientState = 'connecting' | 'connected' | 'disconnecting' | 'disconnected'\n\n// Connection-related constants\nconst CONNECTION_TIMEOUTS = {\n  HEARTBEAT_INTERVAL: 25000,\n  RECONNECT_DELAY: 10,\n  HEARTBEAT_TIMEOUT_FALLBACK: 100,\n} as const\n\nconst RECONNECT_INTERVALS = [1000, 2000, 5000, 10000] as const\nconst DEFAULT_RECONNECT_FALLBACK = 10000\n\nexport interface WebSocketLikeConstructor {\n  new (address: string | URL, subprotocols?: string | string[] | undefined): WebSocketLike\n  // Allow additional properties that may exist on WebSocket constructors\n  [key: string]: any\n}\n\nexport interface WebSocketLikeError {\n  error: any\n  message: string\n  type: string\n}\n\nexport type RealtimeClientOptions = {\n  transport?: WebSocketLikeConstructor\n  timeout?: number\n  heartbeatIntervalMs?: number\n  heartbeatCallback?: (status: HeartbeatStatus) => void\n  logger?: Function\n  encode?: Function\n  decode?: Function\n  reconnectAfterMs?: Function\n  headers?: { [key: string]: string }\n  params?: { [key: string]: any }\n  //Deprecated: Use it in favour of correct casing `logLevel`\n  log_level?: LogLevel\n  logLevel?: LogLevel\n  fetch?: Fetch\n  worker?: boolean\n  workerUrl?: string\n  accessToken?: () => Promise<string | null>\n}\n\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`\n\nexport default class RealtimeClient {\n  accessTokenValue: string | null = null\n  apiKey: string | null = null\n  channels: RealtimeChannel[] = new Array()\n  endPoint: string = ''\n  httpEndpoint: string = ''\n  /** @deprecated headers cannot be set on websocket connections */\n  headers?: { [key: string]: string } = {}\n  params?: { [key: string]: string } = {}\n  timeout: number = DEFAULT_TIMEOUT\n  transport: WebSocketLikeConstructor | null = null\n  heartbeatIntervalMs: number = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\n  pendingHeartbeatRef: string | null = null\n  heartbeatCallback: (status: HeartbeatStatus) => void = noop\n  ref: number = 0\n  reconnectTimer: Timer | null = null\n  logger: Function = noop\n  logLevel?: LogLevel\n  encode!: Function\n  decode!: Function\n  reconnectAfterMs!: Function\n  conn: WebSocketLike | null = null\n  sendBuffer: Function[] = []\n  serializer: Serializer = new Serializer()\n  stateChangeCallbacks: {\n    open: Function[]\n    close: Function[]\n    error: Function[]\n    message: Function[]\n  } = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n  }\n  fetch: Fetch\n  accessToken: (() => Promise<string | null>) | null = null\n  worker?: boolean\n  workerUrl?: string\n  workerRef?: Worker\n  private _connectionState: RealtimeClientState = 'disconnected'\n  private _wasManualDisconnect: boolean = false\n  private _authPromise: Promise<void> | null = null\n\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.heartbeatCallback The optional function to handle heartbeat status.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.logLevel Sets the log level for Realtime\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n   */\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\n    // Validate required parameters\n    if (!options?.params?.apikey) {\n      throw new Error('API key is required to connect to Realtime')\n    }\n    this.apiKey = options.params.apikey\n\n    // Initialize endpoint URLs\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\n    this.httpEndpoint = httpEndpointURL(endPoint)\n\n    this._initializeOptions(options)\n    this._setupReconnectionTimer()\n    this.fetch = this._resolveFetch(options?.fetch)\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect(): void {\n    // Skip if already connecting, disconnecting, or connected\n    if (\n      this.isConnecting() ||\n      this.isDisconnecting() ||\n      (this.conn !== null && this.isConnected())\n    ) {\n      return\n    }\n\n    this._setConnectionState('connecting')\n    this._setAuthSafely('connect')\n\n    // Establish WebSocket connection\n    if (this.transport) {\n      // Use custom transport if provided\n      this.conn = new this.transport(this.endpointURL()) as WebSocketLike\n    } else {\n      // Try to use native WebSocket\n      try {\n        this.conn = WebSocketFactory.createWebSocket(this.endpointURL())\n      } catch (error) {\n        this._setConnectionState('disconnected')\n        const errorMessage = (error as Error).message\n\n        // Provide helpful error message based on environment\n        if (errorMessage.includes('Node.js')) {\n          throw new Error(\n            `${errorMessage}\\n\\n` +\n              'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' +\n              'Option 1: Use Node.js 22+ which has native WebSocket support\\n' +\n              'Option 2: Install and provide the \"ws\" package:\\n\\n' +\n              '  npm install ws\\n\\n' +\n              '  import ws from \"ws\"\\n' +\n              '  const client = new RealtimeClient(url, {\\n' +\n              '    ...options,\\n' +\n              '    transport: ws\\n' +\n              '  })'\n          )\n        }\n        throw new Error(`WebSocket not available: ${errorMessage}`)\n      }\n    }\n    this._setupConnectionHandlers()\n  }\n\n  /**\n   * Returns the URL of the websocket.\n   * @returns string The URL of the websocket.\n   */\n  endpointURL(): string {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }))\n  }\n\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code?: number, reason?: string): void {\n    if (this.isDisconnecting()) {\n      return\n    }\n\n    this._setConnectionState('disconnecting', true)\n\n    if (this.conn) {\n      // Setup fallback timer to prevent hanging in disconnecting state\n      const fallbackTimer = setTimeout(() => {\n        this._setConnectionState('disconnected')\n      }, 100)\n\n      this.conn.onclose = () => {\n        clearTimeout(fallbackTimer)\n        this._setConnectionState('disconnected')\n      }\n\n      // Close the WebSocket connection\n      if (code) {\n        this.conn.close(code, reason ?? '')\n      } else {\n        this.conn.close()\n      }\n\n      this._teardownConnection()\n    } else {\n      this._setConnectionState('disconnected')\n    }\n  }\n\n  /**\n   * Returns all created channels\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.channels\n  }\n\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  async removeChannel(channel: RealtimeChannel): Promise<RealtimeRemoveChannelResponse> {\n    const status = await channel.unsubscribe()\n\n    if (this.channels.length === 0) {\n      this.disconnect()\n    }\n\n    return status\n  }\n\n  /**\n   * Unsubscribes and removes all channels\n   */\n  async removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\n    const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()))\n    this.channels = []\n    this.disconnect()\n    return values_1\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data)\n  }\n\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing\n      default:\n        return CONNECTION_STATE.Closed\n    }\n  }\n\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open\n  }\n\n  /**\n   * Returns `true` if the connection is currently connecting.\n   */\n  isConnecting(): boolean {\n    return this._connectionState === 'connecting'\n  }\n\n  /**\n   * Returns `true` if the connection is currently disconnecting.\n   */\n  isDisconnecting(): boolean {\n    return this._connectionState === 'disconnecting'\n  }\n\n  channel(topic: string, params: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    const realtimeTopic = `realtime:${topic}`\n    const exists = this.getChannels().find((c: RealtimeChannel) => c.topic === realtimeTopic)\n\n    if (!exists) {\n      const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\n      this.channels.push(chan)\n\n      return chan\n    } else {\n      return exists\n    }\n  }\n\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data: RealtimeMessage): void {\n    const { topic, event, payload, ref } = data\n    const callback = () => {\n      this.encode(data, (result: any) => {\n        this.conn?.send(result)\n      })\n    }\n    this.log('push', `${topic} ${event} (${ref})`, payload)\n    if (this.isConnected()) {\n      callback()\n    } else {\n      this.sendBuffer.push(callback)\n    }\n  }\n\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * If param is null it will use the `accessToken` callback function or the token set on the client.\n   *\n   * On callback used, it will set the value of the token internal to the client.\n   *\n   * @param token A JWT string to override the token set on the client.\n   */\n  async setAuth(token: string | null = null): Promise<void> {\n    this._authPromise = this._performAuth(token)\n    try {\n      await this._authPromise\n    } finally {\n      this._authPromise = null\n    }\n  }\n  /**\n   * Sends a heartbeat message if the socket is connected.\n   */\n  async sendHeartbeat() {\n    if (!this.isConnected()) {\n      try {\n        this.heartbeatCallback('disconnected')\n      } catch (e) {\n        this.log('error', 'error in heartbeat callback', e)\n      }\n      return\n    }\n\n    // Handle heartbeat timeout and force reconnection if needed\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection')\n      try {\n        this.heartbeatCallback('timeout')\n      } catch (e) {\n        this.log('error', 'error in heartbeat callback', e)\n      }\n\n      // Force reconnection after heartbeat timeout\n      this._wasManualDisconnect = false\n      this.conn?.close(WS_CLOSE_NORMAL, 'heartbeat timeout')\n\n      setTimeout(() => {\n        if (!this.isConnected()) {\n          this.reconnectTimer?.scheduleTimeout()\n        }\n      }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK)\n      return\n    }\n\n    // Send heartbeat message to server\n    this.pendingHeartbeatRef = this._makeRef()\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef,\n    })\n    try {\n      this.heartbeatCallback('sent')\n    } catch (e) {\n      this.log('error', 'error in heartbeat callback', e)\n    }\n\n    this._setAuthSafely('heartbeat')\n  }\n\n  onHeartbeat(callback: (status: HeartbeatStatus) => void): void {\n    this.heartbeatCallback = callback\n  }\n  /**\n   * Flushes send buffer\n   */\n  flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach((callback) => callback())\n      this.sendBuffer = []\n    }\n  }\n\n  /**\n   * Use either custom fetch, if provided, or default fetch to make HTTP requests\n   *\n   * @internal\n   */\n  _resolveFetch = (customFetch?: Fetch): Fetch => {\n    let _fetch: Fetch\n    if (customFetch) {\n      _fetch = customFetch\n    } else if (typeof fetch === 'undefined') {\n      // Node.js environment without native fetch\n      _fetch = (...args) =>\n        import('@supabase/node-fetch' as any)\n          .then(({ default: fetch }) => fetch(...args))\n          .catch((error) => {\n            throw new Error(\n              `Failed to load @supabase/node-fetch: ${error.message}. ` +\n                `This is required for HTTP requests in Node.js environments without native fetch.`\n            )\n          })\n    } else {\n      _fetch = fetch\n    }\n    return (...args) => _fetch(...args)\n  }\n\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef(): string {\n    let newRef = this.ref + 1\n    if (newRef === this.ref) {\n      this.ref = 0\n    } else {\n      this.ref = newRef\n    }\n\n    return this.ref.toString()\n  }\n\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic: string): void {\n    let dupChannel = this.channels.find(\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\n    )\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\n      dupChannel.unsubscribe()\n    }\n  }\n\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel: RealtimeChannel) {\n    this.channels = this.channels.filter((c) => c.topic !== channel.topic)\n  }\n\n  /** @internal */\n  private _onConnMessage(rawMessage: { data: any }) {\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\n      // Handle heartbeat responses\n      if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\n        try {\n          this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error')\n        } catch (e) {\n          this.log('error', 'error in heartbeat callback', e)\n        }\n      }\n\n      // Handle pending heartbeat reference cleanup\n      if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null\n      }\n\n      // Log incoming message\n      const { topic, event, payload, ref } = msg\n      const refString = ref ? `(${ref})` : ''\n      const status = payload.status || ''\n      this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload)\n\n      // Route message to appropriate channels\n      this.channels\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\n        .forEach((channel: RealtimeChannel) => channel._trigger(event, payload, ref))\n\n      this._triggerStateCallbacks('message', msg)\n    })\n  }\n\n  /**\n   * Clear specific timer\n   * @internal\n   */\n  private _clearTimer(timer: 'heartbeat' | 'reconnect'): void {\n    if (timer === 'heartbeat' && this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer)\n      this.heartbeatTimer = undefined\n    } else if (timer === 'reconnect') {\n      this.reconnectTimer?.reset()\n    }\n  }\n\n  /**\n   * Clear all timers\n   * @internal\n   */\n  private _clearAllTimers(): void {\n    this._clearTimer('heartbeat')\n    this._clearTimer('reconnect')\n  }\n\n  /**\n   * Setup connection handlers for WebSocket events\n   * @internal\n   */\n  private _setupConnectionHandlers(): void {\n    if (!this.conn) return\n\n    // Set binary type if supported (browsers and most WebSocket implementations)\n    if ('binaryType' in this.conn) {\n      ;(this.conn as any).binaryType = 'arraybuffer'\n    }\n\n    this.conn.onopen = () => this._onConnOpen()\n    this.conn.onerror = (error: Event) => this._onConnError(error)\n    this.conn.onmessage = (event: any) => this._onConnMessage(event)\n    this.conn.onclose = (event: any) => this._onConnClose(event)\n  }\n\n  /**\n   * Teardown connection and cleanup resources\n   * @internal\n   */\n  private _teardownConnection(): void {\n    if (this.conn) {\n      this.conn.onopen = null\n      this.conn.onerror = null\n      this.conn.onmessage = null\n      this.conn.onclose = null\n      this.conn = null\n    }\n    this._clearAllTimers()\n    this.channels.forEach((channel) => channel.teardown())\n  }\n\n  /** @internal */\n  private _onConnOpen() {\n    this._setConnectionState('connected')\n    this.log('transport', `connected to ${this.endpointURL()}`)\n    this.flushSendBuffer()\n    this._clearTimer('reconnect')\n\n    if (!this.worker) {\n      this._startHeartbeat()\n    } else {\n      if (!this.workerRef) {\n        this._startWorkerHeartbeat()\n      }\n    }\n\n    this._triggerStateCallbacks('open')\n  }\n  /** @internal */\n  private _startHeartbeat() {\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs)\n  }\n\n  /** @internal */\n  private _startWorkerHeartbeat() {\n    if (this.workerUrl) {\n      this.log('worker', `starting worker for from ${this.workerUrl}`)\n    } else {\n      this.log('worker', `starting default worker`)\n    }\n    const objectUrl = this._workerObjectUrl(this.workerUrl!)\n    this.workerRef = new Worker(objectUrl)\n    this.workerRef.onerror = (error) => {\n      this.log('worker', 'worker error', (error as ErrorEvent).message)\n      this.workerRef!.terminate()\n    }\n    this.workerRef.onmessage = (event) => {\n      if (event.data.event === 'keepAlive') {\n        this.sendHeartbeat()\n      }\n    }\n    this.workerRef.postMessage({\n      event: 'start',\n      interval: this.heartbeatIntervalMs,\n    })\n  }\n  /** @internal */\n  private _onConnClose(event: any) {\n    this._setConnectionState('disconnected')\n    this.log('transport', 'close', event)\n    this._triggerChanError()\n    this._clearTimer('heartbeat')\n\n    // Only schedule reconnection if it wasn't a manual disconnect\n    if (!this._wasManualDisconnect) {\n      this.reconnectTimer?.scheduleTimeout()\n    }\n\n    this._triggerStateCallbacks('close', event)\n  }\n\n  /** @internal */\n  private _onConnError(error: Event) {\n    this._setConnectionState('disconnected')\n    this.log('transport', `${error}`)\n    this._triggerChanError()\n    this._triggerStateCallbacks('error', error)\n  }\n\n  /** @internal */\n  private _triggerChanError() {\n    this.channels.forEach((channel: RealtimeChannel) => channel._trigger(CHANNEL_EVENTS.error))\n  }\n\n  /** @internal */\n  private _appendParams(url: string, params: { [key: string]: string }): string {\n    if (Object.keys(params).length === 0) {\n      return url\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?'\n    const query = new URLSearchParams(params)\n    return `${url}${prefix}${query}`\n  }\n\n  private _workerObjectUrl(url: string | undefined): string {\n    let result_url: string\n    if (url) {\n      result_url = url\n    } else {\n      const blob = new Blob([WORKER_SCRIPT], { type: 'application/javascript' })\n      result_url = URL.createObjectURL(blob)\n    }\n    return result_url\n  }\n\n  /**\n   * Set connection state with proper state management\n   * @internal\n   */\n  private _setConnectionState(state: RealtimeClientState, manual = false): void {\n    this._connectionState = state\n\n    if (state === 'connecting') {\n      this._wasManualDisconnect = false\n    } else if (state === 'disconnecting') {\n      this._wasManualDisconnect = manual\n    }\n  }\n\n  /**\n   * Perform the actual auth operation\n   * @internal\n   */\n  private async _performAuth(token: string | null = null): Promise<void> {\n    let tokenToSend: string | null\n\n    if (token) {\n      tokenToSend = token\n    } else if (this.accessToken) {\n      // Always call the accessToken callback to get fresh token\n      tokenToSend = await this.accessToken()\n    } else {\n      tokenToSend = this.accessTokenValue\n    }\n\n    if (this.accessTokenValue != tokenToSend) {\n      this.accessTokenValue = tokenToSend\n      this.channels.forEach((channel) => {\n        const payload = {\n          access_token: tokenToSend,\n          version: DEFAULT_VERSION,\n        }\n\n        tokenToSend && channel.updateJoinPayload(payload)\n\n        if (channel.joinedOnce && channel._isJoined()) {\n          channel._push(CHANNEL_EVENTS.access_token, {\n            access_token: tokenToSend,\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Wait for any in-flight auth operations to complete\n   * @internal\n   */\n  private async _waitForAuthIfNeeded(): Promise<void> {\n    if (this._authPromise) {\n      await this._authPromise\n    }\n  }\n\n  /**\n   * Safely call setAuth with standardized error handling\n   * @internal\n   */\n  private _setAuthSafely(context = 'general'): void {\n    this.setAuth().catch((e) => {\n      this.log('error', `error setting auth in ${context}`, e)\n    })\n  }\n\n  /**\n   * Trigger state change callbacks with proper error handling\n   * @internal\n   */\n  private _triggerStateCallbacks(event: keyof typeof this.stateChangeCallbacks, data?: any): void {\n    try {\n      this.stateChangeCallbacks[event].forEach((callback) => {\n        try {\n          callback(data)\n        } catch (e) {\n          this.log('error', `error in ${event} callback`, e)\n        }\n      })\n    } catch (e) {\n      this.log('error', `error triggering ${event} callbacks`, e)\n    }\n  }\n\n  /**\n   * Setup reconnection timer with proper configuration\n   * @internal\n   */\n  private _setupReconnectionTimer(): void {\n    this.reconnectTimer = new Timer(async () => {\n      setTimeout(async () => {\n        await this._waitForAuthIfNeeded()\n        if (!this.isConnected()) {\n          this.connect()\n        }\n      }, CONNECTION_TIMEOUTS.RECONNECT_DELAY)\n    }, this.reconnectAfterMs)\n  }\n\n  /**\n   * Initialize client options with defaults\n   * @internal\n   */\n  private _initializeOptions(options?: RealtimeClientOptions): void {\n    // Set defaults\n    this.transport = options?.transport ?? null\n    this.timeout = options?.timeout ?? DEFAULT_TIMEOUT\n    this.heartbeatIntervalMs =\n      options?.heartbeatIntervalMs ?? CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL\n    this.worker = options?.worker ?? false\n    this.accessToken = options?.accessToken ?? null\n    this.heartbeatCallback = options?.heartbeatCallback ?? noop\n    // Handle special cases\n    if (options?.params) this.params = options.params\n    if (options?.logger) this.logger = options.logger\n    if (options?.logLevel || options?.log_level) {\n      this.logLevel = options.logLevel || options.log_level\n      this.params = { ...this.params, log_level: this.logLevel as string }\n    }\n\n    // Set up functions with defaults\n    this.reconnectAfterMs =\n      options?.reconnectAfterMs ??\n      ((tries: number) => {\n        return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK\n      })\n\n    this.encode =\n      options?.encode ??\n      ((payload: JSON, callback: Function) => {\n        return callback(JSON.stringify(payload))\n      })\n\n    this.decode = options?.decode ?? this.serializer.decode.bind(this.serializer)\n\n    // Handle worker setup\n    if (this.worker) {\n      if (typeof window !== 'undefined' && !window.Worker) {\n        throw new Error('Web Worker is not supported')\n      }\n      this.workerUrl = options?.workerUrl\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3471, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3476, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/realtime-js/src/index.ts"],"sourcesContent":["import RealtimeClient, {\n  RealtimeClientOptions,\n  RealtimeMessage,\n  RealtimeRemoveChannelResponse,\n  WebSocketLikeConstructor,\n} from './RealtimeClient'\nimport RealtimeChannel, {\n  RealtimeChannelOptions,\n  RealtimeChannelSendResponse,\n  RealtimePostgresChangesFilter,\n  RealtimePostgresChangesPayload,\n  RealtimePostgresInsertPayload,\n  RealtimePostgresUpdatePayload,\n  RealtimePostgresDeletePayload,\n  REALTIME_LISTEN_TYPES,\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT,\n  REALTIME_SUBSCRIBE_STATES,\n  REALTIME_CHANNEL_STATES,\n} from './RealtimeChannel'\nimport RealtimePresence, {\n  RealtimePresenceState,\n  RealtimePresenceJoinPayload,\n  RealtimePresenceLeavePayload,\n  REALTIME_PRESENCE_LISTEN_EVENTS,\n} from './RealtimePresence'\nimport WebSocketFactory, { WebSocketLike } from './lib/websocket-factory'\n\nexport {\n  RealtimePresence,\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeChannelSendResponse,\n  RealtimeClient,\n  RealtimeClientOptions,\n  RealtimeMessage,\n  RealtimePostgresChangesFilter,\n  RealtimePostgresChangesPayload,\n  RealtimePostgresInsertPayload,\n  RealtimePostgresUpdatePayload,\n  RealtimePostgresDeletePayload,\n  RealtimePresenceJoinPayload,\n  RealtimePresenceLeavePayload,\n  RealtimePresenceState,\n  RealtimeRemoveChannelResponse,\n  REALTIME_LISTEN_TYPES,\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT,\n  REALTIME_PRESENCE_LISTEN_EVENTS,\n  REALTIME_SUBSCRIBE_STATES,\n  REALTIME_CHANNEL_STATES,\n  WebSocketFactory,\n  WebSocketLike,\n  WebSocketLikeConstructor,\n}\n"],"names":[],"mappings":""}},
    {"offset": {"line": 3483, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3510, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/lib/errors.ts"],"sourcesContent":["export class StorageError extends Error {\n  protected __isStorageError = true\n\n  constructor(message: string) {\n    super(message)\n    this.name = 'StorageError'\n  }\n}\n\nexport function isStorageError(error: unknown): error is StorageError {\n  return typeof error === 'object' && error !== null && '__isStorageError' in error\n}\n\nexport class StorageApiError extends StorageError {\n  status: number\n  statusCode: string\n\n  constructor(message: string, status: number, statusCode: string) {\n    super(message)\n    this.name = 'StorageApiError'\n    this.status = status\n    this.statusCode = statusCode\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n      statusCode: this.statusCode,\n    }\n  }\n}\n\nexport class StorageUnknownError extends StorageError {\n  originalError: unknown\n\n  constructor(message: string, originalError: unknown) {\n    super(message)\n    this.name = 'StorageUnknownError'\n    this.originalError = originalError\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAM,MAAO,qBAAqB;IAGhC,YAAY,OAAe,CAAA;QACzB,KAAK,CAAC;QAHE,IAAA,CAAA,gBAAgB,GAAG;QAI3B,IAAI,CAAC,IAAI,GAAG;IACd;;AAGI,SAAU,eAAe,KAAc;IAC3C,OAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,sBAAsB;AAC9E;AAEM,MAAO,wBAAwB;IAInC,YAAY,OAAe,EAAE,MAAc,EAAE,UAAkB,CAAA;QAC7D,KAAK,CAAC;QACN,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,UAAU,GAAG;IACpB;IAEA,SAAM;QACJ,OAAO;YACL,MAAM,IAAI,CAAC,IAAI;YACf,SAAS,IAAI,CAAC,OAAO;YACrB,QAAQ,IAAI,CAAC,MAAM;YACnB,YAAY,IAAI,CAAC,UAAU;;IAE/B;;AAGI,MAAO,4BAA4B;IAGvC,YAAY,OAAe,EAAE,aAAsB,CAAA;QACjD,KAAK,CAAC;QACN,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,aAAa,GAAG;IACvB"}},
    {"offset": {"line": 3549, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3554, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/lib/helpers.ts"],"sourcesContent":["type Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = (...args) =>\n      import('@supabase/node-fetch' as any).then(({ default: fetch }) => fetch(...args))\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\nexport const resolveResponse = async (): Promise<typeof Response> => {\n  if (typeof Response === 'undefined') {\n    // @ts-ignore\n    return (await import('@supabase/node-fetch' as any)).Response\n  }\n\n  return Response\n}\n\nexport const recursiveToCamel = (item: Record<string, any>): unknown => {\n  if (Array.isArray(item)) {\n    return item.map((el) => recursiveToCamel(el))\n  } else if (typeof item === 'function' || item !== Object(item)) {\n    return item\n  }\n\n  const result: Record<string, any> = {}\n  Object.entries(item).forEach(([key, value]) => {\n    const newKey = key.replace(/([-_][a-z])/gi, (c) => c.toUpperCase().replace(/[-_]/g, ''))\n    result[newKey] = recursiveToCamel(value)\n  })\n\n  return result\n}\n\n/**\n * Determine if input is a plain object\n * An object is plain if it's created by either {}, new Object(), or Object.create(null)\n * source: https://github.com/sindresorhus/is-plain-obj\n */\nexport const isPlainObject = (value: object): boolean => {\n  if (typeof value !== 'object' || value === null) {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(value)\n  return (\n    (prototype === null ||\n      prototype === Object.prototype ||\n      Object.getPrototypeOf(prototype) === null) &&\n    !(Symbol.toStringTag in value) &&\n    !(Symbol.iterator in value)\n  )\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,MAAM,eAAe,CAAC;IAC3B,IAAI;IACJ,IAAI,aAAa;QACf,SAAS;IACX,OAAO,IAAI,OAAO,UAAU,aAAa;QACvC,SAAS,CAAC,GAAG,OACX,8IAAsC,IAAI,CAAC,CAAC,EAAE,SAAS,MAAK,EAAE,GAAK,UAAS;IAChF,OAAO;QACL,SAAS;IACX;IACA,OAAO,CAAC,GAAG,OAAS,UAAU;AAChC;AAEO,MAAM,kBAAkB,IAAqC,UAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA;QAClE,IAAI,OAAO,aAAa,aAAa;YACnC,aAAa;YACb,OAAO,CAAC,mJAA2C,EAAE,QAAQ;QAC/D;QAEA,OAAO;IACT;AAEO,MAAM,mBAAmB,CAAC;IAC/B,IAAI,MAAM,OAAO,CAAC,OAAO;QACvB,OAAO,KAAK,GAAG,CAAC,CAAC,KAAO,iBAAiB;IAC3C,OAAO,IAAI,OAAO,SAAS,cAAc,SAAS,OAAO,OAAO;QAC9D,OAAO;IACT;IAEA,MAAM,SAA8B,CAAA;IACpC,OAAO,OAAO,CAAC,MAAM,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;QACxC,MAAM,SAAS,IAAI,OAAO,CAAC,iBAAiB,CAAC,IAAM,EAAE,WAAW,GAAG,OAAO,CAAC,SAAS;QACpF,MAAM,CAAC,OAAO,GAAG,iBAAiB;IACpC;IAEA,OAAO;AACT;AAOO,MAAM,gBAAgB,CAAC;IAC5B,IAAI,OAAO,UAAU,YAAY,UAAU,MAAM;QAC/C,OAAO;IACT;IAEA,MAAM,YAAY,OAAO,cAAc,CAAC;IACxC,OACE,CAAC,cAAc,QACb,cAAc,OAAO,SAAS,IAC9B,OAAO,cAAc,CAAC,eAAe,IAAI,KAC3C,CAAC,CAAC,OAAO,WAAW,IAAI,KAAK,KAC7B,CAAC,CAAC,OAAO,QAAQ,IAAI,KAAK;AAE9B"}},
    {"offset": {"line": 3625, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3630, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/lib/fetch.ts"],"sourcesContent":["import { StorageApiError, StorageUnknownError } from './errors'\nimport { isPlainObject, resolveResponse } from './helpers'\nimport { FetchParameters } from './types'\n\nexport type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  duplex?: string\n  noResolveJson?: boolean\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = async (\n  error: unknown,\n  reject: (reason?: any) => void,\n  options?: FetchOptions\n) => {\n  const Res = await resolveResponse()\n\n  if (error instanceof Res && !options?.noResolveJson) {\n    error\n      .json()\n      .then((err) => {\n        const status = error.status || 500\n        const statusCode = err?.statusCode || status + ''\n        reject(new StorageApiError(_getErrorMessage(err), status, statusCode))\n      })\n      .catch((err) => {\n        reject(new StorageUnknownError(_getErrorMessage(err), err))\n      })\n  } else {\n    reject(new StorageUnknownError(_getErrorMessage(error), error))\n  }\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET' || !body) {\n    return params\n  }\n\n  if (isPlainObject(body)) {\n    params.headers = { 'Content-Type': 'application/json', ...options?.headers }\n    params.body = JSON.stringify(body)\n  } else {\n    params.body = body\n  }\n\n  if (options?.duplex) {\n    params.duplex = options.duplex\n  }\n\n  return { ...params, ...parameters }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, parameters, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return result\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject, options))\n  })\n}\n\nexport async function get(\n  fetcher: Fetch,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\n}\n\nexport async function post(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\n}\n\nexport async function put(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\n}\n\nexport async function head(\n  fetcher: Fetch,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(\n    fetcher,\n    'HEAD',\n    url,\n    {\n      ...options,\n      noResolveJson: true,\n    },\n    parameters\n  )\n}\n\nexport async function remove(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3743, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3748, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/packages/StreamDownloadBuilder.ts"],"sourcesContent":["import { isStorageError } from '../lib/errors'\nimport { DownloadResult } from '../lib/types'\n\nexport default class StreamDownloadBuilder implements PromiseLike<DownloadResult<ReadableStream>> {\n  constructor(\n    private downloadFn: () => Promise<Response>,\n    private shouldThrowOnError: boolean\n  ) {}\n\n  then<TResult1 = DownloadResult<ReadableStream>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: DownloadResult<ReadableStream>) => TResult1 | PromiseLike<TResult1>)\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this.execute().then(onfulfilled, onrejected)\n  }\n\n  private async execute(): Promise<DownloadResult<ReadableStream>> {\n    try {\n      const result = await this.downloadFn()\n\n      return {\n        data: result.body as ReadableStream,\n        error: null,\n      }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGc,MAAO;IACnB,YACU,UAAmC,EACnC,kBAA2B,CAAA;QAD3B,IAAA,CAAA,UAAU,GAAV;QACA,IAAA,CAAA,kBAAkB,GAAlB;IACP;IAEH,KACE,WAEQ,EACR,UAAuE,EAAA;QAEvE,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa;IAC1C;IAEc,UAAO;;YACnB,IAAI;gBACF,MAAM,SAAS,MAAM,IAAI,CAAC,UAAU;gBAEpC,OAAO;oBACL,MAAM,OAAO,IAAsB;oBACnC,OAAO;;YAEX,EAAE,OAAO,OAAO;gBACd,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBAC3B,MAAM;gBACR;gBAEA,IAAI,CAAA,GAAA,iLAAA,CAAA,iBAAc,AAAd,EAAe,QAAQ;oBACzB,OAAO;wBAAE,MAAM;wBAAM;oBAAK;gBAC5B;gBAEA,MAAM;YACR;QACF"}},
    {"offset": {"line": 3812, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3817, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/packages/BlobDownloadBuilder.ts"],"sourcesContent":["import { isStorageError } from '../lib/errors'\nimport { DownloadResult } from '../lib/types'\nimport StreamDownloadBuilder from './StreamDownloadBuilder'\n\nexport default class BlobDownloadBuilder implements PromiseLike<DownloadResult<Blob>> {\n  constructor(\n    private downloadFn: () => Promise<Response>,\n    private shouldThrowOnError: boolean\n  ) {}\n\n  asStream(): StreamDownloadBuilder {\n    return new StreamDownloadBuilder(this.downloadFn, this.shouldThrowOnError)\n  }\n\n  then<TResult1 = DownloadResult<Blob>, TResult2 = never>(\n    onfulfilled?: ((value: DownloadResult<Blob>) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this.execute().then(onfulfilled, onrejected)\n  }\n\n  private async execute(): Promise<DownloadResult<Blob>> {\n    try {\n      const result = await this.downloadFn()\n\n      return {\n        data: await result.blob(),\n        error: null,\n      }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIc,MAAO;IACnB,YACU,UAAmC,EACnC,kBAA2B,CAAA;QAD3B,IAAA,CAAA,UAAU,GAAV;QACA,IAAA,CAAA,kBAAkB,GAAlB;IACP;IAEH,WAAQ;QACN,OAAO,IAAI,qMAAA,CAAA,UAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB;IAC3E;IAEA,KACE,WAAwF,EACxF,UAAuE,EAAA;QAEvE,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa;IAC1C;IAEc,UAAO;;YACnB,IAAI;gBACF,MAAM,SAAS,MAAM,IAAI,CAAC,UAAU;gBAEpC,OAAO;oBACL,MAAM,MAAM,OAAO,IAAI;oBACvB,OAAO;;YAEX,EAAE,OAAO,OAAO;gBACd,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBAC3B,MAAM;gBACR;gBAEA,IAAI,CAAA,GAAA,iLAAA,CAAA,iBAAc,AAAd,EAAe,QAAQ;oBACzB,OAAO;wBAAE,MAAM;wBAAM;oBAAK;gBAC5B;gBAEA,MAAM;YACR;QACF"}},
    {"offset": {"line": 3886, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3891, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts"],"sourcesContent":["import { isStorageError, StorageError, StorageUnknownError } from '../lib/errors'\nimport { Fetch, get, head, post, put, remove } from '../lib/fetch'\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers'\nimport {\n  FileObject,\n  FileOptions,\n  SearchOptions,\n  FetchParameters,\n  TransformOptions,\n  DestinationOptions,\n  FileObjectV2,\n  Camelize,\n  SearchV2Options,\n  SearchV2Result,\n} from '../lib/types'\nimport BlobDownloadBuilder from './BlobDownloadBuilder'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\ntype FileBody =\n  | ArrayBuffer\n  | ArrayBufferView\n  | Blob\n  | Buffer\n  | File\n  | FormData\n  | NodeJS.ReadableStream\n  | ReadableStream<Uint8Array>\n  | URLSearchParams\n  | string\n\nexport default class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n  protected shouldThrowOnError = false\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Enable throwing errors instead of returning them.\n   */\n  public throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { id: string; path: string; fullPath: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      let headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      const metadata = options.metadata\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        if (metadata) {\n          body.append('metadata', this.encodeMetadata(metadata))\n        }\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n        if (metadata) {\n          body.append('metadata', this.encodeMetadata(metadata))\n        }\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n\n        if (metadata) {\n          headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata))\n        }\n      }\n\n      if (fileOptions?.headers) {\n        headers = { ...headers, ...fileOptions.headers }\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const data = await (method == 'PUT' ? put : post)(\n        this.fetch,\n        `${this.url}/object/${_path}`,\n        body as object,\n        { headers, ...(options?.duplex ? { duplex: options.duplex } : {}) }\n      )\n\n      return {\n        data: { path: cleanPath, id: data.Id, fullPath: data.Key },\n        error: null,\n      }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async upload(\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { id: string; path: string; fullPath: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async uploadToSignedUrl(\n    path: string,\n    token: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ) {\n    const cleanPath = this._removeEmptyFolders(path)\n    const _path = this._getFinalPath(cleanPath)\n\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\n    url.searchParams.set('token', token)\n\n    try {\n      let body\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...{ 'x-upsert': String(options.upsert as boolean) },\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const data = await put(this.fetch, url.toString(), body as object, { headers })\n\n      return {\n        data: { path: cleanPath, fullPath: data.Key },\n        error: null,\n      }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for 2 hours.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n   */\n  async createSignedUploadUrl(\n    path: string,\n    options?: { upsert: boolean }\n  ): Promise<\n    | {\n        data: { signedUrl: string; token: string; path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      const headers = { ...this.headers }\n\n      if (options?.upsert) {\n        headers['x-upsert'] = 'true'\n      }\n\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/upload/sign/${_path}`,\n        {},\n        { headers }\n      )\n\n      const url = new URL(this.url + data.url)\n\n      const token = url.searchParams.get('token')\n\n      if (!token) {\n        throw new StorageError('No token returned by API')\n      }\n\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { id: string; path: string; fullPath: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   * @param options The destination options.\n   */\n  async move(\n    fromPath: string,\n    toPath: string,\n    options?: DestinationOptions\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath,\n          destinationBucket: options?.destinationBucket,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   * @param options The destination options.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string,\n    options?: DestinationOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath,\n          destinationBucket: options?.destinationBucket,\n        },\n        { headers: this.headers }\n      )\n      return { data: { path: data.Key }, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: { signedUrl: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\n        { headers: this.headers }\n      )\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\n      data = { signedUrl }\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number,\n    options?: { download: string | boolean }\n  ): Promise<\n    | {\n        data: { error: string | null; path: string | null; signedUrl: string }[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedUrl: datum.signedURL\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n            : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  download<Options extends { transform?: TransformOptions }>(\n    path: string,\n    options?: Options\n  ): BlobDownloadBuilder {\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\n    const _path = this._getFinalPath(path)\n    const downloadFn = () =>\n      get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n    return new BlobDownloadBuilder(downloadFn, this.shouldThrowOnError)\n  }\n\n  /**\n   * Retrieves the details of an existing file.\n   * @param path\n   */\n  async info(path: string): Promise<\n    | {\n        data: Camelize<FileObjectV2>\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    const _path = this._getFinalPath(path)\n\n    try {\n      const data = await get(this.fetch, `${this.url}/object/info/${_path}`, {\n        headers: this.headers,\n      })\n\n      return { data: recursiveToCamel(data) as Camelize<FileObjectV2>, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Checks the existence of a file.\n   * @param path\n   */\n  async exists(path: string): Promise<\n    | {\n        data: boolean\n        error: null\n      }\n    | {\n        data: boolean\n        error: StorageError\n      }\n  > {\n    const _path = this._getFinalPath(path)\n\n    try {\n      await head(this.fetch, `${this.url}/object/${_path}`, {\n        headers: this.headers,\n      })\n\n      return { data: true, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error) && error instanceof StorageUnknownError) {\n        const originalError = error.originalError as unknown as { status: number }\n\n        if ([400, 404].includes(originalError?.status)) {\n          return { data: false, error }\n        }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  getPublicUrl(\n    path: string,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): { data: { publicUrl: string } } {\n    const _path = this._getFinalPath(path)\n    const _queryString = []\n\n    const downloadQueryParam = options?.download\n      ? `download=${options.download === true ? '' : options.download}`\n      : ''\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam)\n    }\n\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery)\n    }\n\n    let queryString = _queryString.join('&')\n    if (queryString !== '') {\n      queryString = `?${queryString}`\n    }\n\n    return {\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  async remove(paths: string[]): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files and folders within a path of the bucket.\n   * @param path The folder path.\n   * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * @experimental this method signature might change in the future\n   * @param options search options\n   * @param parameters\n   */\n  async listV2(\n    options?: SearchV2Options,\n    parameters?: FetchParameters\n  ): Promise<\n    | {\n        data: SearchV2Result\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const body = { ...options }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list-v2/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  protected encodeMetadata(metadata: Record<string, any>) {\n    return JSON.stringify(metadata)\n  }\n\n  toBase64(data: string) {\n    if (typeof Buffer !== 'undefined') {\n      return Buffer.from(data).toString('base64')\n    }\n    return btoa(data)\n  }\n\n  private _getFinalPath(path: string) {\n    return `${this.bucketId}/${path.replace(/^\\/+/, '')}`\n  }\n\n  private _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n\n  private transformOptsToQueryString(transform: TransformOptions) {\n    const params = []\n    if (transform.width) {\n      params.push(`width=${transform.width}`)\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`)\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`)\n    }\n\n    if (transform.format) {\n      params.push(`format=${transform.format}`)\n    }\n\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`)\n    }\n\n    return params.join('&')\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4585, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4590, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/lib/version.ts"],"sourcesContent":["// Generated automatically during releases by scripts/update-version-files.ts\n// This file provides runtime access to the package version for:\n// - HTTP request headers (e.g., X-Client-Info header for API requests)\n// - Debugging and support (identifying which version is running)\n// - Telemetry and logging (version reporting in errors/analytics)\n// - Ensuring build artifacts match the published package version\nexport const version = '2.74.0'\n"],"names":[],"mappings":"AAAA,6EAA6E;AAC7E,gEAAgE;AAChE,uEAAuE;AACvE,iEAAiE;AACjE,kEAAkE;AAClE,iEAAiE;;;;AAC1D,MAAM,UAAU"}},
    {"offset": {"line": 4600, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4605, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/lib/constants.ts"],"sourcesContent":["import { version } from './version'\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${version}` }\n"],"names":[],"mappings":";;;;;;AACO,MAAM,kBAAkB;IAAE,iBAAiB,CAAA,WAAA,EAAc,kLAAA,CAAA,UAAO,CAAA,CAAE;AAAA"}},
    {"offset": {"line": 4614, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4619, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/packages/StorageBucketApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from '../lib/constants'\nimport { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport { Bucket, BucketType } from '../lib/types'\nimport { StorageClientOptions } from '../StorageClient'\n\nexport default class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n  protected shouldThrowOnError = false\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    fetch?: Fetch,\n    opts?: StorageClientOptions\n  ) {\n    const baseUrl = new URL(url)\n\n    // if legacy uri is used, replace with new storage host (disables request buffering to allow > 50GB uploads)\n    // \"project-ref.supabase.co\" becomes \"project-ref.storage.supabase.co\"\n    if (opts?.useNewHostname) {\n      const isSupabaseHost = /supabase\\.(co|in|red)$/.test(baseUrl.hostname)\n      if (isSupabaseHost && !baseUrl.hostname.includes('storage.supabase.')) {\n        baseUrl.hostname = baseUrl.hostname.replace('supabase.', 'storage.supabase.')\n      }\n    }\n\n    this.url = baseUrl.href.replace(/\\/$/, '')\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Enable throwing errors instead of returning them.\n   */\n  public throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n  async listBuckets(): Promise<\n    | {\n        data: Bucket[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(id: string): Promise<\n    | {\n        data: Bucket\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   * @returns newly created bucket id\n   * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.\n   *   - default bucket type is `STANDARD`\n   */\n  async createBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n      type?: BucketType\n    } = {\n      public: false,\n    }\n  ): Promise<\n    | {\n        data: Pick<Bucket, 'name'>\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        {\n          id,\n          name: id,\n          type: options.type,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates a Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   */\n  async updateBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n    }\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(id: string): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(id: string): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (this.shouldThrowOnError) {\n        throw error\n      }\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4880, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4885, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/storage-js/src/StorageClient.ts"],"sourcesContent":["import StorageFileApi from './packages/StorageFileApi'\nimport StorageBucketApi from './packages/StorageBucketApi'\nimport { Fetch } from './lib/fetch'\n\nexport interface StorageClientOptions {\n  useNewHostname?: boolean\n}\n\nexport class StorageClient extends StorageBucketApi {\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    fetch?: Fetch,\n    opts?: StorageClientOptions\n  ) {\n    super(url, headers, fetch, opts)\n  }\n\n  /**\n   * Perform file operation in a bucket.\n   *\n   * @param id The bucket id to operate on.\n   */\n  from(id: string): StorageFileApi {\n    return new StorageFileApi(this.url, this.headers, id, this.fetch)\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAQM,MAAO,sBAAsB,gMAAA,CAAA,UAAgB;IACjD,YACE,GAAW,EACX,UAAqC,CAAA,CAAE,EACvC,KAAa,EACb,IAA2B,CAAA;QAE3B,KAAK,CAAC,KAAK,SAAS,OAAO;IAC7B;IAEA;;;;QAKA,KAAK,EAAU,EAAA;QACb,OAAO,IAAI,8LAAA,CAAA,UAAc,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,KAAK;IAClE"}},
    {"offset": {"line": 4905, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4910, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/supabase-js/src/lib/version.ts"],"sourcesContent":["// Generated automatically during releases by scripts/update-version-files.ts\n// This file provides runtime access to the package version for:\n// - HTTP request headers (e.g., X-Client-Info header for API requests)\n// - Debugging and support (identifying which version is running)\n// - Telemetry and logging (version reporting in errors/analytics)\n// - Ensuring build artifacts match the published package version\nexport const version = '2.74.0'\n"],"names":[],"mappings":"AAAA,6EAA6E;AAC7E,gEAAgE;AAChE,uEAAuE;AACvE,iEAAiE;AACjE,kEAAkE;AAClE,iEAAiE;;;;AAC1D,MAAM,UAAU"}},
    {"offset": {"line": 4920, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4925, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/supabase-js/src/lib/constants.ts"],"sourcesContent":["// constants.ts\nimport { RealtimeClientOptions } from '@supabase/realtime-js'\nimport { SupabaseAuthClientOptions } from './types'\nimport { version } from './version'\n\nlet JS_ENV = ''\n// @ts-ignore\nif (typeof Deno !== 'undefined') {\n  JS_ENV = 'deno'\n} else if (typeof document !== 'undefined') {\n  JS_ENV = 'web'\n} else if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n  JS_ENV = 'react-native'\n} else {\n  JS_ENV = 'node'\n}\n\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js-${JS_ENV}/${version}` }\n\nexport const DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS,\n}\n\nexport const DEFAULT_DB_OPTIONS = {\n  schema: 'public',\n}\n\nexport const DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit',\n}\n\nexport const DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\n"],"names":[],"mappings":";;;;;;;;;;AAKA,IAAI,SAAS;AACb,aAAa;AACb,IAAI,OAAO,SAAS,aAAa;IAC/B,SAAS;AACX,OAAO,IAAI,OAAO,aAAa,aAAa;IAC1C,SAAS;AACX,OAAO,IAAI,OAAO,cAAc,eAAe,UAAU,OAAO,KAAK,eAAe;IAClF,SAAS;AACX,OAAO;IACL,SAAS;AACX;AAEO,MAAM,kBAAkB;IAAE,iBAAiB,CAAA,YAAA,EAAe,OAAM,CAAA,EAAI,mLAAA,CAAA,UAAO,CAAA,CAAE;AAAA;AAE7E,MAAM,yBAAyB;IACpC,SAAS;;AAGJ,MAAM,qBAAqB;IAChC,QAAQ;;AAGH,MAAM,uBAAkD;IAC7D,kBAAkB;IAClB,gBAAgB;IAChB,oBAAoB;IACpB,UAAU;;AAGL,MAAM,2BAAkD,CAAA"}},
    {"offset": {"line": 4962, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4967, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/supabase-js/src/lib/fetch.ts"],"sourcesContent":["// @ts-ignore\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch'\n\ntype Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = nodeFetch as unknown as Fetch\n  } else {\n    _fetch = fetch\n  }\n  return (...args: Parameters<Fetch>) => _fetch(...args)\n}\n\nexport const resolveHeadersConstructor = () => {\n  if (typeof Headers === 'undefined') {\n    return NodeFetchHeaders\n  }\n\n  return Headers\n}\n\nexport const fetchWithAuth = (\n  supabaseKey: string,\n  getAccessToken: () => Promise<string | null>,\n  customFetch?: Fetch\n): Fetch => {\n  const fetch = resolveFetch(customFetch)\n  const HeadersConstructor = resolveHeadersConstructor()\n\n  return async (input, init) => {\n    const accessToken = (await getAccessToken()) ?? supabaseKey\n    let headers = new HeadersConstructor(init?.headers)\n\n    if (!headers.has('apikey')) {\n      headers.set('apikey', supabaseKey)\n    }\n\n    if (!headers.has('Authorization')) {\n      headers.set('Authorization', `Bearer ${accessToken}`)\n    }\n\n    return fetch(input, { ...init, headers })\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKO,MAAM,eAAe,CAAC;IAC3B,IAAI;IACJ,IAAI,aAAa;QACf,SAAS;IACX,OAAO,IAAI,OAAO,UAAU,aAAa;QACvC,SAAS,yJAAA,CAAA,UAA6B;IACxC,OAAO;QACL,SAAS;IACX;IACA,OAAO,CAAC,GAAG,OAA4B,UAAU;AACnD;AAEO,MAAM,4BAA4B;IACvC,IAAI,OAAO,YAAY,aAAa;QAClC,OAAO,yJAAA,CAAA,UAAgB;IACzB;IAEA,OAAO;AACT;AAEO,MAAM,gBAAgB,CAC3B,aACA,gBACA;IAEA,MAAM,SAAQ,aAAa;IAC3B,MAAM,qBAAqB;IAE3B,OAAO,CAAO,OAAO,OAAQ,UAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA;;YAC3B,MAAM,cAAc,CAAA,KAAC,MAAM,gBAAiB,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI;YAChD,IAAI,UAAU,IAAI,mBAAmB,SAAI,QAAJ,SAAI,KAAA,IAAA,KAAA,IAAJ,KAAM,OAAO;YAElD,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW;gBAC1B,QAAQ,GAAG,CAAC,UAAU;YACxB;YAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,kBAAkB;gBACjC,QAAQ,GAAG,CAAC,iBAAiB,CAAA,OAAA,EAAU,YAAW,CAAE;YACtD;YAEA,OAAO,OAAM,OAAK,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GAAO,OAAI;gBAAE;YAAO;QACxC;AACF"}},
    {"offset": {"line": 5037, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5042, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/supabase-js/src/lib/helpers.ts"],"sourcesContent":["// helpers.ts\nimport { SupabaseClientOptions } from './types'\n\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nexport function ensureTrailingSlash(url: string): string {\n  return url.endsWith('/') ? url : url + '/'\n}\n\nexport const isBrowser = () => typeof window !== 'undefined'\n\nexport function applySettingDefaults<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n>(\n  options: SupabaseClientOptions<SchemaName>,\n  defaults: SupabaseClientOptions<any>\n): Required<SupabaseClientOptions<SchemaName>> {\n  const {\n    db: dbOptions,\n    auth: authOptions,\n    realtime: realtimeOptions,\n    global: globalOptions,\n  } = options\n  const {\n    db: DEFAULT_DB_OPTIONS,\n    auth: DEFAULT_AUTH_OPTIONS,\n    realtime: DEFAULT_REALTIME_OPTIONS,\n    global: DEFAULT_GLOBAL_OPTIONS,\n  } = defaults\n\n  const result: Required<SupabaseClientOptions<SchemaName>> = {\n    db: {\n      ...DEFAULT_DB_OPTIONS,\n      ...dbOptions,\n    },\n    auth: {\n      ...DEFAULT_AUTH_OPTIONS,\n      ...authOptions,\n    },\n    realtime: {\n      ...DEFAULT_REALTIME_OPTIONS,\n      ...realtimeOptions,\n    },\n    storage: {},\n    global: {\n      ...DEFAULT_GLOBAL_OPTIONS,\n      ...globalOptions,\n      headers: {\n        ...(DEFAULT_GLOBAL_OPTIONS?.headers ?? {}),\n        ...(globalOptions?.headers ?? {}),\n      },\n    },\n    accessToken: async () => '',\n  }\n\n  if (options.accessToken) {\n    result.accessToken = options.accessToken\n  } else {\n    // hack around Required<>\n    delete (result as any).accessToken\n  }\n\n  return result\n}\n\n/**\n * Validates a Supabase client URL\n *\n * @param {string} supabaseUrl - The Supabase client URL string.\n * @returns {URL} - The validated base URL.\n * @throws {Error}\n */\nexport function validateSupabaseUrl(supabaseUrl: string): URL {\n  const trimmedUrl = supabaseUrl?.trim()\n\n  if (!trimmedUrl) {\n    throw new Error('supabaseUrl is required.')\n  }\n\n  if (!trimmedUrl.match(/^https?:\\/\\//i)) {\n    throw new Error('Invalid supabaseUrl: Must be a valid HTTP or HTTPS URL.')\n  }\n\n  try {\n    return new URL(ensureTrailingSlash(trimmedUrl))\n  } catch {\n    throw Error('Invalid supabaseUrl: Provided URL is malformed.')\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGM,SAAU;IACd,OAAO,uCAAuC,OAAO,CAAC,SAAS,SAAU,CAAC;QACxE,IAAI,IAAI,AAAC,KAAK,MAAM,KAAK,KAAM,GAC7B,IAAI,KAAK,MAAM,IAAI,AAAC,IAAI,MAAO;QACjC,OAAO,EAAE,QAAQ,CAAC;IACpB;AACF;AAEM,SAAU,oBAAoB,GAAW;IAC7C,OAAO,IAAI,QAAQ,CAAC,OAAO,MAAM,MAAM;AACzC;AAEO,MAAM,YAAY,IAAM,OAAO,WAAW;AAE3C,SAAU,qBAMd,OAA0C,EAC1C,QAAoC;;IAEpC,MAAM,EACJ,IAAI,SAAS,EACb,MAAM,WAAW,EACjB,UAAU,eAAe,EACzB,QAAQ,aAAa,EACtB,GAAG;IACJ,MAAM,EACJ,IAAI,kBAAkB,EACtB,MAAM,oBAAoB,EAC1B,UAAU,wBAAwB,EAClC,QAAQ,sBAAsB,EAC/B,GAAG;IAEJ,MAAM,SAAsD;QAC1D,IAAE,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GACG,qBACA;QAEL,MAAI,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GACC,uBACA;QAEL,UAAQ,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GACH,2BACA;QAEL,SAAS,CAAA;QACT,QAAM,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GACD,yBACA,gBAAa;YAChB,SAAO,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GACD,CAAA,KAAA,2BAAsB,QAAtB,2BAAsB,KAAA,IAAA,KAAA,IAAtB,uBAAwB,OAAO,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI,CAAA,IACnC,CAAA,KAAA,kBAAa,QAAb,kBAAa,KAAA,IAAA,KAAA,IAAb,cAAe,OAAO,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI,CAAA;QAAG;QAGrC,aAAa,IAAW,UAAA,IAAA,EAAA,KAAA,GAAA,KAAA,GAAA;gBAAC,OAAA;YAAE;;IAG7B,IAAI,QAAQ,WAAW,EAAE;QACvB,OAAO,WAAW,GAAG,QAAQ,WAAW;IAC1C,OAAO;QACL,yBAAyB;QACzB,OAAQ,OAAe,WAAW;IACpC;IAEA,OAAO;AACT;AASM,SAAU,oBAAoB,WAAmB;IACrD,MAAM,aAAa,gBAAW,QAAX,gBAAW,KAAA,IAAA,KAAA,IAAX,YAAa,IAAI;IAEpC,IAAI,CAAC,YAAY;QACf,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,WAAW,KAAK,CAAC,kBAAkB;QACtC,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,OAAO,IAAI,IAAI,oBAAoB;IACrC,EAAE,OAAA,IAAM;QACN,MAAM,MAAM;IACd;AACF"}},
    {"offset": {"line": 5124, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5129, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/supabase-js/src/lib/SupabaseAuthClient.ts"],"sourcesContent":["import { AuthClient } from '@supabase/auth-js'\nimport { SupabaseAuthClientOptions } from './types'\n\nexport class SupabaseAuthClient extends AuthClient {\n  constructor(options: SupabaseAuthClientOptions) {\n    super(options)\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAGM,MAAO,2BAA2B,oNAAA,CAAA,aAAU;IAChD,YAAY,OAAkC,CAAA;QAC5C,KAAK,CAAC;IACR"}},
    {"offset": {"line": 5141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5146, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/supabase-js/src/SupabaseClient.ts"],"sourcesContent":["import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/auth-js'\nimport {\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n} from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport {\n  DEFAULT_GLOBAL_OPTIONS,\n  DEFAULT_DB_OPTIONS,\n  DEFAULT_AUTH_OPTIONS,\n  DEFAULT_REALTIME_OPTIONS,\n} from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { applySettingDefaults, validateSupabaseUrl } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  // The second type parameter is also used for specifying db_schema, so we\n  // support both cases.\n  // TODO: Allow setting db_schema from ClientOptions.\n  SchemaNameOrClientOptions extends\n    | (string & keyof Omit<Database, '__InternalSupabase'>)\n    | { PostgrestVersion: string } = 'public' extends keyof Omit<Database, '__InternalSupabase'>\n    ? 'public'\n    : string & keyof Omit<Database, '__InternalSupabase'>,\n  SchemaName extends string &\n    keyof Omit<Database, '__InternalSupabase'> = SchemaNameOrClientOptions extends string &\n    keyof Omit<Database, '__InternalSupabase'>\n    ? SchemaNameOrClientOptions\n    : 'public' extends keyof Omit<Database, '__InternalSupabase'>\n      ? 'public'\n      : string & keyof Omit<Omit<Database, '__InternalSupabase'>, '__InternalSupabase'>,\n  Schema extends Omit<Database, '__InternalSupabase'>[SchemaName] extends GenericSchema\n    ? Omit<Database, '__InternalSupabase'>[SchemaName]\n    : never = Omit<Database, '__InternalSupabase'>[SchemaName] extends GenericSchema\n    ? Omit<Database, '__InternalSupabase'>[SchemaName]\n    : never,\n  ClientOptions extends { PostgrestVersion: string } = SchemaNameOrClientOptions extends string &\n    keyof Omit<Database, '__InternalSupabase'>\n    ? // If the version isn't explicitly set, look for it in the __InternalSupabase object to infer the right version\n      Database extends { __InternalSupabase: { PostgrestVersion: string } }\n      ? Database['__InternalSupabase']\n      : // otherwise default to 12\n        { PostgrestVersion: '12' }\n    : SchemaNameOrClientOptions extends { PostgrestVersion: string }\n      ? SchemaNameOrClientOptions\n      : never,\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n  realtime: RealtimeClient\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  storage: SupabaseStorageClient\n\n  protected realtimeUrl: URL\n  protected authUrl: URL\n  protected storageUrl: URL\n  protected functionsUrl: URL\n  protected rest: PostgrestClient<Database, ClientOptions, SchemaName>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken?: string\n  protected accessToken?: () => Promise<string | null>\n\n  protected headers: Record<string, string>\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.storage Options passed along to the storage-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    const baseUrl = validateSupabaseUrl(supabaseUrl)\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    this.realtimeUrl = new URL('realtime/v1', baseUrl)\n    this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace('http', 'ws')\n    this.authUrl = new URL('auth/v1', baseUrl)\n    this.storageUrl = new URL('storage/v1', baseUrl)\n    this.functionsUrl = new URL('functions/v1', baseUrl)\n\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${baseUrl.hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth.storageKey ?? ''\n    this.headers = settings.global.headers ?? {}\n\n    if (!settings.accessToken) {\n      this.auth = this._initSupabaseAuthClient(\n        settings.auth ?? {},\n        this.headers,\n        settings.global.fetch\n      )\n    } else {\n      this.accessToken = settings.accessToken\n\n      this.auth = new Proxy<SupabaseAuthClient>({} as any, {\n        get: (_, prop) => {\n          throw new Error(\n            `@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(\n              prop\n            )} is not possible`\n          )\n        },\n      })\n    }\n\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch)\n    this.realtime = this._initRealtimeClient({\n      headers: this.headers,\n      accessToken: this._getAccessToken.bind(this),\n      ...settings.realtime,\n    })\n    this.rest = new PostgrestClient(new URL('rest/v1', baseUrl).href, {\n      headers: this.headers,\n      schema: settings.db.schema,\n      fetch: this.fetch,\n    })\n\n    this.storage = new SupabaseStorageClient(\n      this.storageUrl.href,\n      this.headers,\n      this.fetch,\n      options?.storage\n    )\n\n    if (!settings.accessToken) {\n      this._listenForAuthEvents()\n    }\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions(): FunctionsClient {\n    return new FunctionsClient(this.functionsUrl.href, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.from\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName],\n  >(relation: TableName): PostgrestQueryBuilder<ClientOptions, Schema, Table, TableName>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<ClientOptions, Schema, View, ViewName>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<ClientOptions, Schema, any> {\n    return this.rest.from(relation)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.schema\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema<DynamicSchema extends string & keyof Omit<Database, '__InternalSupabase'>>(\n    schema: DynamicSchema\n  ): PostgrestClient<\n    Database,\n    ClientOptions,\n    DynamicSchema,\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\n  > {\n    return this.rest.schema<DynamicSchema>(schema)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(\n    fn: FnName,\n    args: Fn['Args'] = {},\n    options: {\n      head?: boolean\n      get?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    ClientOptions,\n    Schema,\n    Fn['Returns'] extends any[]\n      ? Fn['Returns'][number] extends Record<string, unknown>\n        ? Fn['Returns'][number]\n        : never\n      : never,\n    Fn['Returns'],\n    FnName,\n    null,\n    'RPC'\n  > {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    if (this.accessToken) {\n      return await this.accessToken()\n    }\n\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? this.supabaseKey\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      userStorage,\n      storageKey,\n      flowType,\n      lock,\n      debug,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl.href,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      userStorage,\n      flowType,\n      lock,\n      debug,\n      fetch,\n      // auth checks if there is a custom authorizaiton header using this flag\n      // so it knows whether to return an error when getUser is called with no session\n      hasCustomAuthorizationHeader: Object.keys(this.headers).some(\n        (key) => key.toLowerCase() === 'authorization'\n      ),\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl.href, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session?.access_token)\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    source: 'CLIENT' | 'STORAGE',\n    token?: string\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      this.changedAccessToken = token\n      this.realtime.setAuth(token)\n    } else if (event === 'SIGNED_OUT') {\n      this.realtime.setAuth()\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 5393, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5398, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@supabase/supabase-js/src/index.ts"],"sourcesContent":["import SupabaseClient from './SupabaseClient'\nimport type { SupabaseClientOptions } from './lib/types'\n\nexport * from '@supabase/auth-js'\nexport type { User as AuthUser, Session as AuthSession } from '@supabase/auth-js'\nexport {\n  type PostgrestResponse,\n  type PostgrestSingleResponse,\n  type PostgrestMaybeSingleResponse,\n  PostgrestError,\n} from '@supabase/postgrest-js'\nexport {\n  FunctionsHttpError,\n  FunctionsFetchError,\n  FunctionsRelayError,\n  FunctionsError,\n  type FunctionInvokeOptions,\n  FunctionRegion,\n} from '@supabase/functions-js'\nexport * from '@supabase/realtime-js'\nexport { default as SupabaseClient } from './SupabaseClient'\nexport type { SupabaseClientOptions, QueryResult, QueryData, QueryError } from './lib/types'\n\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = <\n  Database = any,\n  SchemaNameOrClientOptions extends\n    | (string & keyof Omit<Database, '__InternalSupabase'>)\n    | { PostgrestVersion: string } = 'public' extends keyof Omit<Database, '__InternalSupabase'>\n    ? 'public'\n    : string & keyof Omit<Database, '__InternalSupabase'>,\n  SchemaName extends string &\n    keyof Omit<Database, '__InternalSupabase'> = SchemaNameOrClientOptions extends string &\n    keyof Omit<Database, '__InternalSupabase'>\n    ? SchemaNameOrClientOptions\n    : 'public' extends keyof Omit<Database, '__InternalSupabase'>\n      ? 'public'\n      : string & keyof Omit<Omit<Database, '__InternalSupabase'>, '__InternalSupabase'>,\n>(\n  supabaseUrl: string,\n  supabaseKey: string,\n  options?: SupabaseClientOptions<SchemaName>\n): SupabaseClient<Database, SchemaNameOrClientOptions, SchemaName> => {\n  return new SupabaseClient<Database, SchemaNameOrClientOptions, SchemaName>(\n    supabaseUrl,\n    supabaseKey,\n    options\n  )\n}\n\n// Check for Node.js <= 18 deprecation\nfunction shouldShowDeprecationWarning(): boolean {\n  // Skip in browser environments\n  if (typeof window !== 'undefined') {\n    return false\n  }\n\n  // Skip if process is not available (e.g., Edge Runtime)\n  if (typeof process === 'undefined') {\n    return false\n  }\n\n  // Use dynamic property access to avoid Next.js Edge Runtime static analysis warnings\n  const processVersion = (process as any)['version']\n  if (processVersion === undefined || processVersion === null) {\n    return false\n  }\n\n  const versionMatch = processVersion.match(/^v(\\d+)\\./)\n  if (!versionMatch) {\n    return false\n  }\n\n  const majorVersion = parseInt(versionMatch[1], 10)\n  return majorVersion <= 18\n}\n\nif (shouldShowDeprecationWarning()) {\n  console.warn(\n    `⚠️  Node.js 18 and below are deprecated and will no longer be supported in future versions of @supabase/supabase-js. ` +\n      `Please upgrade to Node.js 20 or later. ` +\n      `For more information, visit: https://github.com/orgs/supabase/discussions/37217`\n  )\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AA0BO,MAAM,eAAe,CAe1B,aACA,aACA;IAEA,OAAO,IAAI,mLAAA,CAAA,UAAc,CACvB,aACA,aACA;AAEJ;AAEA,sCAAsC;AACtC,SAAS;IACP,+BAA+B;IAC/B,IAAI,OAAO,WAAW,aAAa;QACjC,OAAO;IACT;IAEA,wDAAwD;IACxD,IAAI,OAAO,gKAAA,CAAA,UAAO,KAAK,aAAa;QAClC,OAAO;IACT;IAEA,qFAAqF;IACrF,MAAM,iBAAkB,gKAAA,CAAA,UAAe,CAAC,UAAU;IAClD,IAAI,mBAAmB,aAAa,mBAAmB,MAAM;QAC3D,OAAO;IACT;IAEA,MAAM,eAAe,eAAe,KAAK,CAAC;IAC1C,IAAI,CAAC,cAAc;QACjB,OAAO;IACT;IAEA,MAAM,eAAe,SAAS,YAAY,CAAC,EAAE,EAAE;IAC/C,OAAO,gBAAgB;AACzB;AAEA,IAAI,gCAAgC;IAClC,QAAQ,IAAI,CACV,CAAA,qHAAA,CAAuH,GACrH,CAAA,uCAAA,CAAyC,GACzC,CAAA,+EAAA,CAAiF;AAEvF"}},
    {"offset": {"line": 5438, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}